==== webchat\app\chat.controller.js ====
import { SessionStore } from '../services/session.store.js';
import { ConversationsService } from '../services/conversations.service.js';
import { fetchGuestToken } from '../services/token.service.js';
import { API_BASE } from '../services/config.js';
import { bus } from '../services/bus.js';

export class ChatController {
  convo = null;
  svc = new ConversationsService();

  async resumeOrStart(storedSid) {
    await this.svc.init();
    const sid = storedSid || SessionStore.convoSid;
    if (!sid) return null;

    const convo = await this.svc.getConversationBySidWithRetry(sid);
    if (!convo) return null;

    this.convo = convo;
    SessionStore.convoSid = this.convo.sid;

    // Cargar recientes
    try {
      const page = await this.convo.getMessages();
      bus.emit('messages:reset', page.items);
    } catch (e) {
      console.warn('Failed to load message history', e);
    }

    // Eventos de mensajes
    this.convo.on('messageAdded', (msg) => bus.emit('messages:added', msg));

    // Mostrar UI de chat
    bus.emit('chat:ready', { sid: this.convo.sid });

    // Feature flag de video
    try {
      const r = await fetch(`${API_BASE}/api/video/enabled`);
      const data = await r.json().catch(()=> ({}));
      bus.emit('video:feature', { enabled: !!data?.enabled });
    } catch {
      bus.emit('video:feature', { enabled: false });
    }

    return this.convo;
  }

  async startNew({ name, email }) {
    // 1) Guest token (setea identity si es necesario)
    await fetchGuestToken();

    // 2) Crear/fetch conversación
    const convoRes = await fetch(`${API_BASE}/api/conversations`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        uniqueName: email, friendlyName: name || email, attributes: { name, email }
      })
    });
    if (!convoRes.ok) {
      const txt = await convoRes.text().catch(()=> '');
      throw new Error(`Failed to create conversation: ${txt}`);
    }
    const convoData = await convoRes.json();

    // 3) Asegurar participant membership
    try {
      const addRes = await fetch(`${API_BASE}/api/conversations/${convoData.sid}/participants`, {
        method: 'POST',
        headers: { 'Content-Type':'application/json' },
        body: JSON.stringify({
          type:'chat',
          identity: SessionStore.identity,
          attributes: { name, email, role:'guest' }
        })
      });
      if (!addRes.ok && addRes.status !== 409) {
        const errData = await addRes.json().catch(()=> ({}));
        if (errData.error?.code !== 50433) {
          const e = new Error(errData.error?.message || 'Failed to add participant');
          e.status = addRes.status; e.code = errData.error?.code;
          throw e;
        }
      }
    } catch (err) {
      if (err.status !== 409 && err.code !== 50433) throw err;
    }

    // 4) Abrir conversación
    return this.resumeOrStart(convoData.sid);
  }

  async send(body) {
    if (!this.convo || !body) return;
    await this.convo.sendMessage(body);
    bus.emit('messages:echo', { author: SessionStore.identity || 'me', body });
  }

  async end() {
    try { await this.convo?.leave?.(); } catch (e) { console.warn('leave() failed or unsupported', e); }
    try {
      if (this.convo?.sid) {
        fetch(`${API_BASE}/api/conversations/${this.convo.sid}/close`, { method: 'POST' }).catch(()=>{});
      }
    } catch {}
    this.convo = null;
    SessionStore.clearExceptProfile();
    bus.emit('chat:ended');
  }
}

==== /webchat\app\chat.controller.js ====

==== webchat\app\main.js ====
import { ChatController } from './chat.controller.js';
import { VideoController } from './video.controller.js';
import { SessionStore } from '../services/session.store.js';
import '../ui/messages.view.js';
import { initFormsUI } from '../ui/forms.view.js';
import '../ui/shell.ui.js';
import { bus } from '../services/bus.js';

const chat  = new ChatController();
const video = new VideoController();

initFormsUI({ chat, video });

// Enviar mensajes de sistema por eventos de video
let suppressVideoStartMessageOnce = false;

bus.on('video:started', () => {
  if (suppressVideoStartMessageOnce) { suppressVideoStartMessageOnce = false; return; }
  try { chat.send('[system] Video call started'); } catch {}
});
bus.on('video:ended', () => {
  try { chat.send('[system] Video call ended'); } catch {}
});

// Boot: reanudar conversación (y video si estaba activo)
(async function boot(){
  const convo = await chat.resumeOrStart(SessionStore.convoSid);
  if (convo && SessionStore.videoActive) {
    suppressVideoStartMessageOnce = true; // no reenviar mensaje al reanudar
    setTimeout(() => video.start(convo.sid, undefined, { auto:true }).catch(console.error), 400);
  }
})();

// Desconectar video al navegar fuera
window.addEventListener('beforeunload', () => {
  try { video.end(); } catch {}
});

==== /webchat\app\main.js ====

==== webchat\app\video.controller.js ====
import { VideoService } from '../services/video.service.js';
import { SessionStore } from '../services/session.store.js';
import { bus } from '../services/bus.js';

export class VideoController {
  svc = new VideoService();

  async start(convoSid, previewCb, { auto = false } = {}) {
    const room = await this.svc.start(convoSid, previewCb);
    SessionStore.videoActive = true;

    // Emitir evento UI
    bus.emit('video:started', room);

    // Participantes remotos (emitimos al bus para que video.view los adjunte)
    room.on('participantConnected', p => bus.emit('video:participant:connected', p));

    // Cleanup
    room.on('disconnected', () => {
      SessionStore.videoActive = false;
      bus.emit('video:ended');
    });

    return room;
  }

  end() {
    try { this.svc.end(); } catch {}
    SessionStore.videoActive = false;
    bus.emit('video:ended');
  }
}

==== /webchat\app\video.controller.js ====

==== webchat\index.html ====
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, viewport-fit=cover" />
  <title>Website X — Concierge Support (Twilio)</title>

  <!-- Fonts -->
  <link rel="preconnect" href="https://fonts.googleapis.com" />
  <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
  <link href="https://fonts.googleapis.com/css2?family=Plus+Jakarta+Sans:wght@400;500;600;700&display=swap" rel="stylesheet" />

  <!-- Styles modularizados -->
  <link rel="stylesheet" href="./styles/base.css" />
  <link rel="stylesheet" href="./styles/layout.css" />
  <link rel="stylesheet" href="./styles/components.css" />
  <link rel="stylesheet" href="./styles/chat.css" />
  <link rel="stylesheet" href="./styles/video.css" />
  <link rel="stylesheet" href="./styles/phone-lab.css" />
</head>
<body>
  <div class="backdrop" id="backdrop"></div>

  <div class="page">
    <aside class="sidebar" id="drawer" data-include="./partials/sidebar.html"></aside>

    <div class="content" id="contentRoot">
      <header class="topbar" data-include="./partials/topbar.html"></header>

      <main>
        <section class="hero" id="kb" aria-label="Hero" data-include="./partials/hero.html"></section>
        <section class="grid" id="chat" aria-label="Start chat" data-include="./partials/grid-start-chat.html"></section>
        <section id="chat-container" class="chat hidden" aria-live="polite" aria-label="Live chat" data-include="./partials/chat-shell.html"></section>
        <section class="grid" id="agent-portal" aria-label="Agent Portal" data-include="./partials/agent-portal.html"></section>
        <section class="grid" id="phone-lab" aria-label="Phone Lab" data-include="./partials/phone-lab.html"></section>
        <section class="grid" id="status" aria-label="Service Status" data-include="./partials/status.html"></section>
        <section class="grid" id="how" aria-label="How it works" data-include="./partials/how.html"></section>
      </main>

      <footer>
        © <span id="year"></span> Website X • Premium Support — <a href="#" style="color:var(--accent)">Privacy</a> · <a href="#" style="color:var(--accent)">Terms</a>
      </footer>
    </div>
  </div>

  <nav class="bottombar" aria-label="Bottom navigation" data-include="./partials/bottombar.html"></nav>
  <div class="fab" data-include="./partials/fab.html"></div>

  <!-- SDKs (order matters) -->
  <script src="https://media.twiliocdn.com/sdk/js/conversations/v2.4/twilio-conversations.min.js" defer></script>
  <script src="https://media.twiliocdn.com/sdk/js/video/releases/2.27.0/twilio-video.min.js" defer></script>
  <!-- Voice: ya no hay CDN oficial; usamos unpkg para v2.x -->
  <script src="https://unpkg.com/@twilio/voice-sdk@2.10.1/dist/twilio.min.js" defer></script>

  <!-- Config inicial: EXACTO al monolítico -->
  <script>
    window.API_BASE = 'http://localhost:4000';
    window.DEMO = {
      agentPortalUrl: 'https://agents.demo.example.com',
      agentId: 'demo-agent-1',
      workerSid: 'WKxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx',
      identity: 'client:agent:demo-agent-1',
      softphoneUrl: '',
      ivrNumber: '+12058275832',
      outboundFromNumber: '+19793416695',
      customerProfiles: [
        { id: 'alex', name: 'Alex Johnson', callerId: '+19793416695', scenario: 'vip', dtmf: '1-2', locale: 'en-US', notes: 'VIP · vehicle on file' },
      ]
    };
    try { document.getElementById('year').textContent = new Date().getFullYear(); } catch {}
  </script>

  <!-- Cargador de parciales y arranque -->
  <script type="module">
    async function includePartials() {
      const nodes = [...document.querySelectorAll('[data-include]')];
      await Promise.all(nodes.map(async el => {
        const res = await fetch(el.dataset.include);
        el.innerHTML = await res.text();
        // el.removeAttribute('data-include'); // opcional
      }));
    }
    await includePartials();
    // Toda la UI está en el DOM → ahora sí, importa la app
    import './app/main.js';
  </script>
</body>
</html>

==== /webchat\index.html ====

==== webchat\partials\agent-portal.html ====
<div class="card">
  <div class="card-body">
    <h2>Agent Portal — Access</h2>
    <p class="helper">Log in as an <b>agent</b> to receive chats and calls from this demo.</p>

    <div class="portal-forms">
      <!-- Portal URL -->
      <div class="form-block">
        <label class="label" for="agentPortalUrl">Portal URL</label>
        <div class="input-group">
          <input class="input" id="agentPortalUrl" placeholder="https://portal.agents.demo" />
          <button class="btn open-btn" type="button" id="openPortal" title="Open Agent Portal">Open</button>
        </div>
      </div>

      <!-- Demo fields -->
      <div class="form-block">
        <label class="label">Demo fields (copy to the Portal)</label>
        <div class="chip-list">
          <div class="chip-row">
            <span class="chip mono trunc" id="agentId-pill" title="Agent ID">agent-id: demo-agent-1</span>
            <button class="btn icon sm" data-copy="#agentId-pill" aria-label="Copy Agent ID" title="Copy Agent ID">
              <svg viewBox="0 0 24 24" width="18" height="18" fill="none" stroke="currentColor" stroke-width="1.8">
                <rect x="9" y="9" width="13" height="13" rx="2" />
                <path d="M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1" />
              </svg>
            </button>
          </div>

          <div class="chip-row">
            <span class="chip mono trunc" id="workerSid-pill" title="TaskRouter Worker SID">WKXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX</span>
            <button class="btn icon sm" data-copy="#workerSid-pill" aria-label="Copy Worker SID" title="Copy Worker SID">
              <svg viewBox="0 0 24 24" width="18" height="18" fill="none" stroke="currentColor" stroke-width="1.8">
                <rect x="9" y="9" width="13" height="13" rx="2" />
                <path d="M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1" />
              </svg>
            </button>
          </div>

          <div class="chip-row">
            <span class="chip mono trunc" id="identity-pill" title="Identity (must equal Worker attributes.contact_uri)">client:agent:demo-agent-1</span>
            <button class="btn icon sm" data-copy="#identity-pill" aria-label="Copy Identity" title="Copy Identity">
              <svg viewBox="0 0 24 24" width="18" height="18" fill="none" stroke="currentColor" stroke-width="1.8">
                <rect x="9" y="9" width="13" height="13" rx="2" />
                <path d="M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1" />
              </svg>
            </button>
          </div>
        </div>

        <div class="callout small portal-note">
          <b>Important:</b> In TaskRouter, set the Worker’s <span class="mono">attributes.contact_uri</span>
          to exactly match the Identity you enter above. The portal login checks this match.
        </div>
      </div>
    </div>

    <div class="callout small" style="margin-top:12px">
      Tip: keep the portal open while placing calls from <b>Phone Lab</b>.
    </div>
  </div>
</div>

<div class="card">
  <div class="card-body">
    <h3>Requirements</h3>
    <ul class="small" style="margin:8px 0 0 18px; line-height:1.6">
      <li>Allow microphone/camera for WebRTC calls.</li>
      <li>Disable aggressive blockers if the portal requires 3rd-party cookies or CORS flows.</li>
      <li>Set your <span class="mono">API_BASE</span> and demo variables in this file.</li>
    </ul>
  </div>
</div>

==== /webchat\partials\agent-portal.html ====

==== webchat\partials\bottombar.html ====
<div class="tabs" id="mobileTabs">
  <a href="#kb" class="tab">
    <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.8">
      <path d="M3 12l2-2m0 0l7-7 7 7M5 10v10a1 1 0 001 1h3m10-11l2 2m-2-2v10a1 1 0 01-1 1h-3m-6 0h6" />
    </svg>
    <span>Home</span>
  </a>
  <a href="#chat" class="tab">
    <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.8">
      <path d="M21 15a4 4 0 01-4 4H7l-4 4V5a4 4 0 014-4h10a4 4 0 014 4z" />
    </svg>
    <span>Chat</span>
  </a>
  <a href="#agent-portal" class="tab">
    <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.8">
      <path d="M3 7h18M3 12h18M3 17h18" />
    </svg>
    <span>Portal</span>
  </a>
  <a href="#phone-lab" class="tab">
    <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.8">
      <path d="M22 16.92V21a2 2 0 0 1-2.18 2A19.86 19.86 0 0 1 3 6.18 2 2 0 0 1 5 4h4.09a2 2 0 0 1 2 1.72l.45 3a2 2 0 0 1-.57 1.73L9.91 12a16 16 0 0 0 6.18 6.18l1.55-1.05a2 2 0 0 1 1.73-.57l3 .45a2 2 0 0 1 1.72 2.01z" />
    </svg>
    <span>IVR</span>
  </a>
  <a href="#status" class="tab">
    <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.8">
      <path d="M3 3v18h18" />
      <path d="M7 13l3 3 7-7" />
    </svg>
    <span>Status</span>
  </a>
</div>

==== /webchat\partials\bottombar.html ====

==== webchat\partials\chat-shell.html ====
<div class="chat-shell">
  <div class="chat-header">
    <div class="agent">
      <div class="avatar" aria-hidden="true">
        <svg width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.6">
          <path d="M20 21v-2a4 4 0 0 0-4-4H8a4 4 0 0 0-4 4v2" />
          <circle cx="12" cy="7" r="4" />
        </svg>
      </div>
      <div style="min-width:0">
        <div style="font-weight:700; overflow:hidden; text-overflow:ellipsis; white-space:nowrap">Concierge Agent</div>
        <div class="status"><span class="dot"></span> Online</div>
      </div>
    </div>
    <div class="toolbar" role="toolbar" aria-label="Chat actions">
      <button class="btn ghost" id="copy-transcript" type="button" title="Copy transcript">
        <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.6">
          <rect x="9" y="9" width="13" height="13" rx="2" />
          <path d="M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1" />
        </svg>
        Copy
      </button>
      <button class="btn" id="start-video" type="button" title="Start video">
        <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.6">
          <path d="M23 7l-7 5 7 5V7" />
          <rect x="1" y="5" width="15" height="14" rx="2" ry="2" />
        </svg>
        Video
      </button>
      <button class="btn hidden" id="end-video" type="button" title="Hang up">
        <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.6">
          <path d="M22 16V8l-7 4 7 4z" />
          <rect x="2" y="6" width="14" height="12" rx="2" />
          <path d="M2 2l20 20" />
        </svg>
        Hang up
      </button>
      <button class="btn" id="end-chat" type="button" title="End chat">
        <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.6">
          <path d="M3 6h18" />
          <path d="M19 6v12a2 2 0 0 1-2 2H7a2 2 0 0 1-2-2V6" />
        </svg>
        End Chat
      </button>
    </div>
  </div>

  <div id="video-container" class="video-shell hidden">
    <div class="video-grid">
      <div class="video-pane">
        <h4>You</h4>
        <div id="local-media"></div>
      </div>
      <div class="video-pane">
        <h4>Agent</h4>
        <div id="remote-media"></div>
      </div>
    </div>
  </div>

  <div class="messages-wrap" id="messagesWrap">
    <ul id="messages"></ul>
  </div>

  <form id="message-form" class="composer" autocomplete="off">
    <label class="chip" title="Attach file">
      <input type="file" hidden id="file-input" />
      <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.6">
        <path d="M21.44 11.05l-9.19 9.19a6 6 0 1 1-8.49-8.49l9.19-9.19a4 4 0 1 1 5.66 5.66L9.88 17.17" />
      </svg>
    </label>
    <input id="message-input" type="text" placeholder="Type a message…" aria-label="Type a message" />
    <button class="send" type="submit">Send</button>
  </form>
</div>

==== /webchat\partials\chat-shell.html ====

==== webchat\partials\fab.html ====
<button type="button" id="fabStart">
  <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
    <path d="M21 15a4 4 0 0 1-4 4H7l-4 4V5a4 4 0 0 1 4-4h10a4 4 0 0 1 4 4z" />
  </svg>
  Start chat
</button>

==== /webchat\partials\fab.html ====

==== webchat\partials\grid-start-chat.html ====
<div class="card">
  <div class="card-body">
    <h2>Start a new chat</h2>
    <p class="helper">This is the customer-side chat. Conversations are routed to agents via TaskRouter.</p>
    <form id="start-form" aria-label="Start form">
      <div class="split">
        <div class="field">
          <label class="label" for="name">Full name</label>
          <input class="input" id="name" type="text" placeholder="e.g. Alex Johnson" required />
        </div>
        <div class="field">
          <label class="label" for="email">Email (reuses a single thread per email)</label>
          <input class="input" id="email" type="email" placeholder="you@company.com" required />
        </div>
      </div>
      <div class="split">
        <div class="field">
          <label class="label" for="topic">Topic</label>
          <select id="topic" aria-label="Topic">
            <option value="support">Technical support</option>
            <option value="billing">Billing</option>
            <option value="sales">Sales</option>
          </select>
        </div>
        <div class="field">
          <label class="label" for="priority">Priority</label>
          <select id="priority" aria-label="Priority">
            <option>Standard</option>
            <option>High</option>
            <option>Urgent</option>
          </select>
        </div>
      </div>
      <div class="start-actions">
        <button class="btn primary" type="submit">Start chat</button>
        <span class="helper">By starting, you accept our <a href="#" style="color:var(--accent)">Terms</a>.</span>
      </div>
      <div class="callout small" style="margin-top:10px">
        Video is optional and depends on backend feature flag <span class="mono">ENABLE_VIDEO=true</span>.
      </div>
    </form>
  </div>
</div>

<div class="card">
  <div class="card-body">
    <h3>Demo flow (customer ↔ agent)</h3>
    <ol class="small" style="margin:10px 0 0 18px; line-height:1.6">
      <li>Start the <b>customer chat</b> here.</li>
      <li>Open the <b>Agent Portal</b>, log in with the demo fields, and <i>receive</i> chats/calls.</li>
      <li>Use <b>Phone Lab (IVR)</b> to pick a customer profile and place a simulated call to test IVR and routing.</li>
    </ol>
    <div class="kpis">
      <div class="kpi">
        <div class="label">Urgent SLA</div>
        <div class="value">&lt; 60s</div>
      </div>
      <div class="kpi">
        <div class="label">CSAT</div>
        <div class="value">98.6%</div>
      </div>
      <div class="kpi">
        <div class="label">Avg. Time to Resolve</div>
        <div class="value">7m 42s</div>
      </div>
    </div>
  </div>
</div>

==== /webchat\partials\grid-start-chat.html ====

==== webchat\partials\hero.html ====
<div class="spark" aria-hidden="true"></div>
<div style="display:flex; align-items:center; gap:10px; margin-bottom:8px; flex-wrap:wrap">
  <div class="badge">Enterprise-grade</div>
  <div class="status"><span class="dot"></span> Live routing via Twilio</div>
</div>
<h1>Concierge Contact Center, built on <span style="color:var(--accent)">Twilio</span></h1>
<p>Start a customer chat (with optional video), open the Agent Portal, or place an IVR call. This page is the
  single entry point to experience a cloud-native, high-confidence contact center powered by TaskRouter,
  Conversations, Voice, and Video—plus a sample CRM for an automotive dealer.</p>

==== /webchat\partials\hero.html ====

==== webchat\partials\how.html ====
<div class="card" aria-label="How it works">
  <div class="card-body">
    <h3>How it works — under the hood</h3>
    <ul class="small" style="margin:8px 0 0 18px; line-height:1.7">
      <li><b>Conversations (chat):</b> guest tokens (<span class="mono">/api/chat/token/guest</span>),
        per-conversation webhooks create a chat task automatically.</li>
      <li><b>TaskRouter (routing):</b> assignment callback (<span class="mono">/api/taskrouter/assignment</span>) accepts chat or sets up voice conferences.</li>
      <li><b>Voice & Softphone:</b> WebRTC device tokens (<span class="mono">/api/token/voice</span>);
        hold/record/transfer endpoints control calls.</li>
      <li><b>Video (optional):</b> <span class="mono">/api/video/ensure-room</span> + agent/guest tokens for a room tied to the chat.</li>
      <li><b>CRM (demo):</b> the portal shows customer/vehicle/appointments/finance data and logs interactions.</li>
    </ul>
  </div>
</div>

==== /webchat\partials\how.html ====

==== webchat\partials\phone-lab.html ====
<div class="card">
  <div class="card-body">
    <h2>Phone Lab — Customer Simulator + IVR</h2>
    <p class="helper">Pick a <b>customer profile</b>, launch the softphone (iframe), and hit <b>Start call</b>. We set the caller ID to trigger the correct IVR path.</p>

    <div class="grid-3" style="margin-top:10px">
      <div class="field">
        <label class="label" for="customerProfile">Customer profile</label>
        <select id="customerProfile"></select>
      </div>
      <div class="field">
        <label class="label" for="callerId">Caller ID (ANI)</label>
        <input class="input mono" id="callerId" placeholder="+15555550100" />
      </div>
      <div class="field">
        <label class="label" for="ivrNumber">IVR number (DID to dial)</label>
        <input class="input mono" id="ivrNumber" placeholder="+15555550123" />
      </div>
    </div>

    <div class="grid-3" style="margin-top:10px">
      <div class="field">
        <label class="label" for="scenario">Scenario ID</label>
        <input class="input" id="scenario" placeholder="vip / billing-delinquent / onboarding" />
      </div>
      <div class="field">
        <label class="label" for="dtmf">Auto DTMF (optional)</label>
        <input class="input mono" id="dtmf" placeholder="1-2-1" />
      </div>
      <div class="field">
        <label class="label" for="locale">Language</label>
        <input class="input" id="locale" placeholder="en-US / es-CR" />
      </div>
    </div>

    <div class="row" style="margin-top:12px; flex-wrap:wrap">
      <button class="btn" id="launchSoftphone" type="button">Launch softphone</button>
      <button class="btn primary" id="startCall" type="button">Start call</button>
      <span class="small">The call is triggered via <span class="mono">POST /demo/call/start</span> on your server.</span>
    </div>
  </div>
</div>

<div class="card">
  <div class="card-body">
    <h3>Embedded softphone</h3>
    <div class="iframe-shell">
      <div id="softphoneWrap" class="iframe-placeholder">
        Set <span class="mono">DEMO.softphoneUrl</span> to load your webphone here.
      </div>
    </div>
    <div class="callout small" style="margin-top:12px">
      If your softphone supports <i>postMessage</i>, we’ll send <span class="mono">{type: 'call', to, from, profile}</span> on start.
    </div>
  </div>
</div>

==== /webchat\partials\phone-lab.html ====

==== webchat\partials\sidebar.html ====
<div class="brand" aria-label="Website X brand">
  <div class="logo" aria-hidden="true">
    <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.8" stroke-linecap="round"
      stroke-linejoin="round" aria-hidden="true">
      <path d="M12 2l7 4v6c0 5-3.5 9-7 10-3.5-1-7-5-7-10V6l7-4z" />
      <path d="M9 12l2 2 4-4" />
    </svg>
  </div>
  <div style="min-width:0">
    <div class="badge" title="Enterprise-grade">TRUSTED</div>
    <div class="title">Website X • Support</div>
  </div>
</div>

<nav class="menu" aria-label="Main menu">
  <a href="#kb" class="nav-link">
    <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.6">
      <path d="M3 12l2-2m0 0l7-7 7 7M5 10v10a1 1 0 001 1h3m10-11l2 2m-2-2v10a1 1 0 01-1 1h-3m-6 0h6" />
    </svg>
    Home <span class="dot-mini"></span>
  </a>
  <a href="#chat" class="nav-link">
    <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.6">
      <path d="M21 15a4 4 0 01-4 4H7l-4 4V5a4 4 0 014-4h10a4 4 0 014 4z" />
    </svg>
    Customer Chat <span class="dot-mini"></span>
  </a>
  <a href="#agent-portal" class="nav-link">
    <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.6">
      <path d="M3 7h18M3 12h18M3 17h18" />
    </svg>
    Agent Portal <span class="dot-mini"></span>
  </a>
  <a href="#phone-lab" class="nav-link">
    <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.6">
      <path d="M22 16.92V21a2 2 0 0 1-2.18 2A19.86 19.86 0 0 1 3 6.18 2 2 0 0 1 5 4h4.09a2 2 0 0 1 2 1.72l.45 3a2 2 0 0 1-.57 1.73L9.91 12a16 16 0 0 0 6.18 6.18l1.55-1.05a2 2 0 0 1 1.73-.57l3 .45a2 2 0 0 1 1.72 2.01z" />
    </svg>
    Phone Lab (IVR) <span class="dot-mini"></span>
  </a>
  <a href="#status" class="nav-link">
    <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.6">
      <path d="M3 3v18h18" />
      <path d="M7 13l3 3 7-7" />
    </svg>
    Service Status <span class="dot-mini"></span>
  </a>
  <a href="#how" class="nav-link">
    <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.6">
      <circle cx="12" cy="12" r="10" />
      <path d="M9.09 9a3 3 0 015.82 1c0 2-3 2-3 4" />
      <path d="M12 17h.01" />
    </svg>
    How it works <span class="dot-mini"></span>
  </a>
</nav>

<div class="cta" style="margin-top:24px">
  <div style="font-weight:700; margin-bottom:6px">Need help now?</div>
  <div class="status"><span class="dot"></span> Agents online</div>
</div>

==== /webchat\partials\sidebar.html ====

==== webchat\partials\status.html ====
<div class="card">
  <div class="card-body">
    <h2>Service status</h2>
    <div class="kpis" id="status-kpis">
      <div class="kpi">
        <div class="label">Backend</div>
        <div class="value" id="kpi-health">—</div>
      </div>
      <div class="kpi">
        <div class="label">Agents online</div>
        <div class="value" id="kpi-agents">—</div>
      </div>
      <div class="kpi">
        <div class="label">Video</div>
        <div class="value" id="kpi-video">—</div>
      </div>
    </div>
    <div class="row" style="margin-top:12px; flex-wrap:wrap">
      <button class="btn" id="refresh-status" type="button">Refresh</button>
      <span class="small">Checks <span class="mono">/api/health</span>, <span class="mono">/api/taskrouter/presence</span> and <span class="mono">/api/video/enabled</span>.</span>
    </div>
  </div>
</div>

==== /webchat\partials\status.html ====

==== webchat\partials\topbar.html ====
<div class="row" style="gap:10px">
  <button class="btn icon" id="menuBtn" aria-label="Open menu" title="Menu">
    <svg width="22" height="22" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
      <path d="M3 6h18M3 12h18M3 18h18" />
    </svg>
  </button>
  <div class="search" role="search" aria-label="Search">
    <svg width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.8">
      <circle cx="11" cy="11" r="7" />
      <path d="M21 21l-4.3-4.3" />
    </svg>
    <input type="search" placeholder="Search articles or ask a question…" aria-label="Search" />
  </div>
</div>

<div class="actions">
  <button class="btn" type="button" id="toggle-theme" title="Toggle theme (light/dark)">
    <svg width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.6">
      <path d="M12 3v2m0 14v2m9-9h-2M5 12H3m15.364 6.364l-1.414-1.414M7.05 7.05L5.636 5.636m12.728 0l-1.414 1.414M7.05 16.95l-1.414 1.414" />
    </svg>
    Theme
  </button>
  <button class="btn primary" type="button" onclick="document.getElementById('name').focus()">Open chat</button>
</div>

==== /webchat\partials\topbar.html ====

==== webchat\services\bus.js ====
class Bus extends EventTarget {
  emit(type, detail){ this.dispatchEvent(new CustomEvent(type, { detail })); }
  on(type, cb){ this.addEventListener(type, (e)=>cb(e.detail)); }
  off(type, cb){ this.removeEventListener(type, cb); }
}
export const bus = new Bus();

==== /webchat\services\bus.js ====

==== webchat\services\config.js ====
// Lee del window.* si existe para permitir overriding desde index.html
export const API_BASE = typeof window !== 'undefined' && window.API_BASE
  ? window.API_BASE
  : 'http://localhost:4000';

export const DEMO = typeof window !== 'undefined' && window.DEMO
  ? window.DEMO
  : {
      agentPortalUrl: '',
      agentId: 'demo-agent-1',
      workerSid: 'WKxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx',
      identity: 'client:agent:demo-agent-1',
      softphoneUrl: '',
      ivrNumber: '+15555550123',
      outboundFromNumber: '+15555550199',
      customerProfiles: []
    };

export const LS = {
  NAME: 'wxs_name',
  EMAIL: 'wxs_email',
  IDENTITY: 'wxs_guest_identity',
  CONVO: 'wxs_conversation_sid',
  VIDEO_ACTIVE: 'wxs_video_active',
  THEME: 'wxs_theme'
};

==== /webchat\services\config.js ====

==== webchat\services\conversations.service.js ====
import { fetchGuestToken } from './token.service.js';

export class ConversationsService {
  client = null;

  async init() {
    const token = await fetchGuestToken();
    const TwClient = window.Twilio?.Conversations?.Client;
    if (!TwClient) throw new Error('Twilio Conversations SDK failed to load.');
    this.client = new TwClient(token);

    // Token refresh
    this.client.on('tokenAboutToExpire', async () => {
      try { await this.client.updateToken(await fetchGuestToken()); } catch (e) { console.error('Guest token refresh failed', e); }
    });
    this.client.on('tokenExpired', async () => {
      try { await this.client.updateToken(await fetchGuestToken()); } catch (e) { console.error('Guest token refresh (expired) failed', e); }
    });

    if (this.client.state !== 'initialized') {
      await new Promise((resolve) => this.client.on('stateChanged', (state) => state === 'initialized' && resolve()));
    }
    return this.client;
  }

  async getConversationBySidWithRetry(sid, maxTries = 6, delayMs = 800) {
    let convo = null;
    for (let i = 0; i < maxTries; i++) {
      try {
        convo = await this.client.getConversationBySid(sid);
        break;
      } catch (err) {
        const msg = String(err?.message || '').toLowerCase();
        if (msg.includes('forbidden') || msg.includes('401') || msg.includes('403')) {
          await new Promise((r) => setTimeout(r, delayMs));
          continue;
        }
        throw err;
      }
    }
    return convo;
  }
}

==== /webchat\services\conversations.service.js ====

==== webchat\services\session.store.js ====
import { LS } from './config.js';

export const SessionStore = {
  get identity() { try { return localStorage.getItem(LS.IDENTITY); } catch { return null; } },
  set identity(v){ try { v ? localStorage.setItem(LS.IDENTITY, v) : localStorage.removeItem(LS.IDENTITY); } catch {} },

  get convoSid() { try { return localStorage.getItem(LS.CONVO); } catch { return null; } },
  set convoSid(v){ try { v ? localStorage.setItem(LS.CONVO, v) : localStorage.removeItem(LS.CONVO); } catch {} },

  get videoActive(){ try { return !!localStorage.getItem(LS.VIDEO_ACTIVE); } catch { return false; } },
  set videoActive(on){ try { on ? localStorage.setItem(LS.VIDEO_ACTIVE, '1') : localStorage.removeItem(LS.VIDEO_ACTIVE); } catch {} },

  get name(){ try { return localStorage.getItem(LS.NAME); } catch { return ''; } },
  set name(v){ try { v ? localStorage.setItem(LS.NAME, v) : localStorage.removeItem(LS.NAME); } catch {} },

  get email(){ try { return localStorage.getItem(LS.EMAIL); } catch { return ''; } },
  set email(v){ try { v ? localStorage.setItem(LS.EMAIL, v) : localStorage.removeItem(LS.EMAIL); } catch {} },

  clearExceptProfile(){
    try {
      localStorage.removeItem(LS.CONVO);
      localStorage.removeItem(LS.IDENTITY);
      localStorage.removeItem(LS.VIDEO_ACTIVE);
    } catch {}
  }
};

==== /webchat\services\session.store.js ====

==== webchat\services\token.service.js ====
import { API_BASE } from './config.js';
import { SessionStore } from './session.store.js';

export async function fetchGuestToken() {
  const identity = SessionStore.identity;
  const identityQs = identity ? `?identity=${encodeURIComponent(identity)}` : '';
  const url = `${API_BASE}/api/chat/${identity ? 'refresh' : 'token'}/guest${identityQs}`;
  const res = await fetch(url);
  if (!res.ok) throw new Error(`Token error: ${res.status}`);
  const data = await res.json();
  if (data.identity) SessionStore.identity = data.identity; // e.g., guest:uuid
  return data.token;
}

==== /webchat\services\token.service.js ====

==== webchat\services\video.service.js ====
import { API_BASE } from './config.js';
import { SessionStore } from './session.store.js';

export class VideoService {
  room = null;

  async start(conversationSid, previewTracksCb) {
    const Video = window.Twilio?.Video;
    if (!Video) throw new Error('Twilio Video SDK is not loaded.');

    // Ensure room in backend
    const ensureRes = await fetch(`${API_BASE}/api/video/ensure-room`, {
      method: 'POST',
      headers: { 'Content-Type':'application/json' },
      body: JSON.stringify({ conversationSid, identity: SessionStore.identity })
    });
    if (!ensureRes.ok) throw new Error(`ensure-room failed: ${ensureRes.status}`);
    const { roomName } = await ensureRes.json();

    // Video token
    const tokRes = await fetch(
      `${API_BASE}/api/video/token/guest?identity=${encodeURIComponent(SessionStore.identity)}&roomName=${encodeURIComponent(roomName)}`
    );
    if (!tokRes.ok) throw new Error(`video token failed: ${tokRes.status}`);
    const { token } = await tokRes.json();

    // Preview tracks (prompt permiso)
    const previewTracks = await Video.createLocalTracks({ audio: true, video: { width: 640 } });
    previewTracksCb?.(previewTracks);

    // Conectar usando los mismos tracks
    this.room = await Video.connect(token, { name: roomName, tracks: previewTracks });
    return this.room;
  }

  end() {
    try { this.room?.disconnect(); } catch {}
    this.room = null;
  }
}

==== /webchat\services\video.service.js ====

==== webchat\styles\base.css ====
/* ===== Base: reset mínimo, tipografía y variables ===== */

:root {
  --bg: #0b1324;
  --bg-2: #0e182b;
  --bg-grad-a: #1c2a44;
  --bg-grad-b: #2b2244;
  --card: rgba(255, 255, 255, 0.05);
  --card-2: rgba(255, 255, 255, 0.07);
  --stroke: rgba(255, 255, 255, 0.14);
  --text: #eaf1fb;
  --muted: #9fb2cc;
  --accent: #4da3ff;
  --accent-2: #9fd1ff;
  --accent-ink: #0b1120;
  --success: #37d39b;
  --warning: #ffbf69;
  --danger: #ff6b6b;
  --shadow: 0 10px 30px rgba(0, 0, 0, .35);
  --radius-xl: 22px;
  --radius-lg: 16px;
  --radius: 12px;
  --glass: saturate(140%) blur(14px);
  --focus: 0 0 0 3px rgba(77, 163, 255, .35);
  --chip-bg: rgba(77, 163, 255, .14);
  --chip-br: rgba(77, 163, 255, .35);
  --spark: rgba(77, 163, 255, .38);

  --topbar-h: 64px;
  --bottombar-h: 64px;
  --safe-top: env(safe-area-inset-top, 0px);
  --safe-bottom: env(safe-area-inset-bottom, 0px);
  --safe-left: env(safe-area-inset-left, 0px);
  --safe-right: env(safe-area-inset-right, 0px);

  --fs-h1: clamp(26px, 3.2vw, 36px);
  --fs-h2: clamp(20px, 2.4vw, 28px);
  --fs-h3: clamp(17px, 2vw, 22px);
  --fs-p: clamp(14px, 1.5vw, 16px);
}

body.light {
  --bg: #f5f8ff;
  --bg-2: #ffffff;
  --bg-grad-a: #e7f1ff;
  --bg-grad-b: #f6f9ff;
  --card: rgba(6, 27, 54, 0.04);
  --card-2: rgba(6, 27, 54, 0.06);
  --stroke: rgba(6, 27, 54, 0.12);
  --text: #0e1a2d;
  --muted: #5b6b7f;
  --accent: #2563eb;
  --accent-2: #93c5fd;
  --accent-ink: #061b36;
  --success: #10b981;
  --warning: #f59e0b;
  --danger: #ef4444;
  --shadow: 0 10px 30px rgba(2, 12, 31, .12);
  --chip-bg: rgba(37, 99, 235, .08);
  --chip-br: rgba(37, 99, 235, .28);
  --spark: rgba(37, 99, 235, .32);
}

* { box-sizing: border-box; }
html, body { height: 100%; }
html { scroll-behavior: smooth; }

body {
  margin: 0;
  color: var(--text);
  background:
    radial-gradient(1200px 800px at 12% -10%, var(--bg-grad-a) 0%, rgba(0, 0, 0, 0) 45%),
    radial-gradient(800px 600px at 88% 8%, var(--bg-grad-b) 0%, rgba(0, 0, 0, 0) 40%),
    linear-gradient(180deg, var(--bg) 0%, var(--bg-2) 100%);
  font-family: "Plus Jakarta Sans", system-ui, -apple-system, Segoe UI, Roboto, Arial, sans-serif;
  letter-spacing: .2px;
  padding-top: calc(var(--topbar-h) + var(--safe-top));
}

body.light {
  background:
    radial-gradient(900px 600px at 10% -10%, var(--bg-grad-a) 0%, rgba(255, 255, 255, 0) 45%),
    radial-gradient(600px 400px at 85% 6%, var(--bg-grad-b) 0%, rgba(255, 255, 255, 0) 35%),
    linear-gradient(180deg, var(--bg) 0%, var(--bg-2) 100%);
}

/* Tipografía básica */
h2 { font-size: var(--fs-h2); margin: 0 0 8px 0; }
h3 { font-size: var(--fs-h3); margin: 0 0 6px 0; }
p, li, label { font-size: var(--fs-p); }

==== /webchat\styles\base.css ====

==== webchat\styles\chat.css ====
/* ===== Chat ===== */

section.chat { display:grid; gap:18px; }

.chat-shell {
  border:1px solid var(--stroke);
  border-radius: var(--radius-xl);
  overflow:hidden;
  background: linear-gradient(180deg, rgba(255,255,255,.07), rgba(255,255,255,.03));
}

.chat-header {
  display:flex; align-items:center; justify-content:space-between; gap:12px;
  padding:14px 16px; border-bottom:1px solid var(--stroke);
  background: linear-gradient(180deg, rgba(255,255,255,.09), rgba(255,255,255,.03));
}

.agent { display:flex; align-items:center; gap:12px; min-width:0; }
.avatar {
  width:36px; height:36px; border-radius:50%;
  background: linear-gradient(135deg, #0f1a2b, #0a1322);
  border:1px solid rgba(255,255,255,.12); display:grid; place-items:center;
}
.status { display:inline-flex; align-items:center; gap:8px; font-size:12px; color: var(--muted); }
.dot { width:8px; height:8px; border-radius:50%; background: var(--success); box-shadow: 0 0 0 3px rgba(61,220,151,.15); }

.toolbar { display:flex; align-items:center; gap:8px; flex-wrap:wrap; }

/* Messages */
.messages-wrap { max-height: 52vh; overflow:auto; padding:12px 16px; }
#messages { list-style:none; margin:0; padding:0; display:grid; gap:10px; }
#messages li { position:relative; display:flex; gap:10px; align-items:flex-end; }

.bubble {
  max-width: 80ch; width: fit-content; padding:12px 14px; border-radius:16px;
  background: rgba(255,255,255,.07); border:1px solid var(--stroke); color: var(--text);
}
.bubble.me {
  margin-left:auto; background: linear-gradient(135deg, #0f315f, #102543);
  border:1px solid rgba(77,163,255,.45); color: #e6f2ff;
}
.time { font-size:11px; color: var(--muted); margin:0 6px; white-space: nowrap; }

/* Composer */
.composer {
  position: sticky; bottom:0; display:flex; align-items:center; gap:10px;
  padding:12px 16px; border-top:1px solid var(--stroke);
  background: linear-gradient(180deg, rgba(255,255,255,.06), rgba(0,0,0,0));
  backdrop-filter: var(--glass);
}
.chip { display:inline-grid; place-items:center; width:40px; height:40px; border-radius:12px; border:1px solid var(--stroke); background: var(--card); }
#message-input {
  flex:1; padding:12px 14px; border-radius:999px; border:1px solid var(--stroke);
  background: rgba(255,255,255,.05); outline:0; color: var(--text);
}
.send {
  padding:12px 16px; border-radius:999px;
  border:1px solid rgba(77,163,255,.45);
  background: linear-gradient(135deg, #0e3b7e, #112a55);
  color:#e6f1ff; font-weight:700; cursor:pointer;
}

/* Responsive ajuste de alto del histórico */
@media (max-width:920px){
  .messages-wrap { max-height: calc(100svh - var(--topbar-h) - var(--bottombar-h) - 260px); }
}

==== /webchat\styles\chat.css ====

==== webchat\styles\components.css ====
/* ===== Componentes reutilizables ===== */

.badge {
  display:inline-flex; align-items:center; gap:8px;
  font-size:12px; background: linear-gradient(180deg, var(--accent), var(--accent-2));
  color: var(--accent-ink); padding:6px 10px; border-radius:999px; font-weight:800;
}

.search {
  display:flex; align-items:center; gap:10px; flex:1; max-width:620px;
  background: var(--card); border:1px solid var(--stroke); border-radius:999px; padding:10px 14px;
}
.search input { border:0; outline:0; flex:1; background:transparent; color: var(--text); }

.actions { display:flex; align-items:center; gap:10px; }

.btn {
  display:inline-flex; align-items:center; gap:10px; padding:10px 14px;
  border-radius:12px; border:1px solid var(--stroke);
  background: var(--card); color: var(--text); cursor:pointer; outline:none;
  transition:.15s border-color,.15s transform,.15s background;
  -webkit-tap-highlight-color: transparent;
}
.btn:hover { border-color: rgba(255,255,255,.22); transform: translateY(-1px); }
.btn:active { transform: translateY(0); }
.btn:focus-visible { box-shadow: var(--focus); }
.btn.primary {
  background: linear-gradient(135deg, #0e3b7e, #112a55);
  border:1px solid rgba(77,163,255,.45); color:#e7f2ff;
  box-shadow: inset 0 1px 0 rgba(255,255,255,.06), 0 6px 20px rgba(21,94,194,.28);
}
.btn.ghost { border-color: var(--chip-br); background: var(--chip-bg); }
.btn.icon { width:40px; height:40px; padding:0; display:grid; place-items:center; border-radius:10px; }

.card { border:1px solid var(--stroke); border-radius: var(--radius-lg); background: var(--card); box-shadow: var(--shadow); overflow:hidden; }
.card .card-body { padding:22px; }

.split { display:grid; grid-template-columns: 1fr 1fr; gap:14px; }

#start-form { display:grid; gap:12px; }
.field { display:grid; gap:8px; }
.label { font-size:12px; color: var(--muted); }

.input, select {
  background: rgba(255,255,255,.05);
  border:1px solid var(--stroke);
  border-radius:12px;
  padding:14px; color: var(--text);
  outline:none; transition:.2s border-color,.2s background;
}
.input:focus, select:focus { border-color: rgba(77,163,255,.55); box-shadow: var(--focus); }
.helper { font-size:12px; color: var(--muted); }
.start-actions { display:flex; align-items:center; gap:12px; flex-wrap:wrap; }
.start-actions .btn { height:44px; }

.hidden { display: none !important; }

.kpis { display:grid; grid-template-columns: repeat(3,1fr); gap:14px; margin-top:6px; }
.kpi { border:1px solid var(--stroke); border-radius:14px; padding:14px; background: var(--card-2); }
.kpi .label { font-size:11px; color: var(--muted); }
.kpi .value { font-size:18px; font-weight:800; }

.row { display:flex; gap:12px; align-items:center; }
.row.wrap { flex-wrap: wrap; }

.pill {
  display:inline-flex; align-items:center; gap:8px; padding:8px 12px;
  border:1px solid var(--chip-br); background: var(--chip-bg); border-radius:999px;
}
.small { font-size:12px; color: var(--muted); }
.mono { font-family: ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, monospace; }

.callout { padding:14px; border:1px dashed var(--stroke); border-radius:12px; background: rgba(255,255,255,.04); }

/* Portal responsive helpers */
.portal-forms { display:grid; grid-template-columns: 1fr 1fr; gap:18px; }
@media (max-width:920px){ .portal-forms { grid-template-columns: 1fr; } }
.portal-forms .form-block { display:grid; gap:10px; }

.input-group { display:grid; grid-template-columns: 1fr auto; gap:10px; align-items:center; }
@media (max-width:480px) {
  .input-group { grid-template-columns: 1fr; }
  .input-group .open-btn { width:100%; }
}

.chip-list { display:grid; gap:10px; }
.chip-row { display:grid; grid-template-columns: 1fr auto; gap:8px; align-items:center; }
.chip { display:block; padding:10px 12px; border:1px solid var(--chip-br); background: var(--chip-bg); border-radius:12px; }
.chip.trunc { overflow:hidden; text-overflow: ellipsis; white-space: nowrap; }
@media (max-width:420px) { .chip.trunc { white-space: normal; word-break: break-all; } }

/* Accesibilidad touch */
@media (hover:none) {
  .menu a, .btn { min-height:44px; }
}

==== /webchat\styles\components.css ====

==== webchat\styles\layout.css ====
/* ===== Layout general: page, sidebar, topbar, main ===== */

.page { display: grid; grid-template-columns: 300px 1fr; min-height: 100svh; }

aside.sidebar {
  position: sticky; top: var(--safe-top);
  height: calc(100svh - var(--safe-top));
  padding: 24px;
  border-right: 1px solid var(--stroke);
  background: linear-gradient(180deg, rgba(255, 255, 255, .05), rgba(255, 255, 255, .03));
  backdrop-filter: var(--glass);
  overflow: auto;
  z-index: 8;
  transition: transform .25s ease;
}

.content { display: flex; flex-direction: column; min-width: 0; }

header.topbar {
  position: fixed; inset: 0 0 auto 0; height: var(--topbar-h);
  padding: max(10px, calc(var(--safe-top)/2)) max(16px, calc(16px + var(--safe-right)));
  padding-left: max(16px, calc(16px + var(--safe-left)));
  border-bottom: 1px solid var(--stroke);
  background: linear-gradient(180deg, rgba(255, 255, 255, .07), rgba(255, 255, 255, .03));
  display: flex; align-items: center; gap: 12px; justify-content: space-between;
  box-shadow: 0 8px 24px rgba(0,0,0,.18);
  backdrop-filter: var(--glass);
  z-index: 9;
}

main { padding: 28px; display: grid; gap: 28px; }

/* Brand / Sidebar */
.brand { display:flex; align-items:center; gap:12px; margin-bottom:18px; }
.brand .logo {
  width:42px; height:42px; border-radius:12px;
  background: linear-gradient(135deg, #0f1a2b, #0a1322);
  border: 1px solid rgba(255,255,255,.1);
  display:grid; place-items:center; box-shadow: var(--shadow);
}
.brand .logo svg { width:22px; height:22px; color: var(--accent); }
.brand .title { font-size: 16px; font-weight: 700; letter-spacing: .4px; }

/* Sidebar menu */
nav.menu { margin-top:16px; display:flex; flex-direction:column; gap:4px; }
.menu a {
  display:flex; gap:12px; align-items:center; text-decoration:none; color:var(--text);
  padding:10px 12px; border-radius:12px; border:1px solid transparent; outline: none; transition:.2s ease;
}
.menu a:hover, .menu a:focus-visible { background:var(--card); border-color:var(--stroke); box-shadow: var(--focus); }
.menu svg { width:18px; height:18px; color: var(--muted); }
.menu a.active .dot-mini { background: var(--accent); }
.dot-mini { width:6px; height:6px; border-radius:999px; background: transparent; margin-left:auto; }
.sidebar .cta { margin-top:auto; padding:16px; border:1px solid var(--stroke); border-radius:16px; background:var(--card); }

/* Grid utilidades */
.grid { display:grid; grid-template-columns: 1.1fr .9fr; gap:28px; }
.grid-3 { display:grid; grid-template-columns: repeat(3, 1fr); gap:14px; }
.grid-2 { display:grid; grid-template-columns: repeat(2, 1fr); gap:14px; }

/* Footer */
footer {
  padding: 18px max(28px, calc(28px + var(--safe-right)));
  padding-left: max(28px, calc(28px + var(--safe-left)));
  border-top: 1px solid var(--stroke);
  color: var(--muted);
}

/* Bottom bar (mobile) */
.bottombar {
  position: fixed; bottom:0; left:0; right:0;
  height: calc(var(--bottombar-h) + var(--safe-bottom));
  padding-bottom: var(--safe-bottom);
  border-top: 1px solid var(--stroke);
  background: linear-gradient(180deg, rgba(255,255,255,.06), rgba(255,255,255,.02));
  backdrop-filter: var(--glass);
  display: none; z-index: 9;
}
.bottombar .tabs { height: var(--bottombar-h); display:grid; grid-template-columns: repeat(5,1fr); align-items:center; }
.bottombar a {
  text-decoration:none; color: var(--text);
  display:flex; flex-direction:column; align-items:center; justify-content:center; gap:6px; font-size:11px; padding-top:6px;
}
.bottombar svg { width:20px; height:20px; color: var(--muted); }
.bottombar a.active svg, .bottombar a.active span { color: var(--accent); }

/* FAB */
.fab {
  position: fixed;
  right: max(16px, calc(16px + var(--safe-right)));
  bottom: calc(var(--bottombar-h) + var(--safe-bottom) + 16px);
  display: none; z-index: 9;
}
.fab button {
  height:56px; min-width:56px; padding:0 18px; border-radius:999px;
  border:1px solid rgba(77,163,255,.45);
  background: linear-gradient(135deg, #0e3b7e, #112a55);
  color:#e6f1ff; font-weight:700; cursor:pointer;
  box-shadow: 0 10px 24px rgba(18,69,140,.35);
  display:inline-flex; align-items:center; gap:10px;
}
.fab svg { width:18px; height:18px; }

/* Backdrop */
.backdrop {
  position: fixed; inset:0; background: rgba(0,0,0,.4); z-index:7;
  opacity: 0; pointer-events: none; transition: opacity .2s ease;
}
.backdrop.show { opacity:1; pointer-events: auto; }

/* Responsive */
@media (max-width:1200px) {
  .grid { grid-template-columns: 1fr; }
  .grid-3 { grid-template-columns: repeat(2,1fr); }
  .grid-2 { grid-template-columns: 1fr; }
}

@media (max-width:920px) {
  .page { grid-template-columns: 1fr; }
  aside.sidebar {
    position: fixed; left:0; top: calc(var(--safe-top) + var(--topbar-h));
    height: calc(100svh - var(--topbar-h) - var(--safe-top) - var(--bottombar-h) - var(--safe-bottom));
    width: min(86vw, 320px);
    transform: translateX(-100%); box-shadow: 0 10px 30px rgba(0,0,0,.45);
    border-right:1px solid var(--stroke); border-radius: 0 16px 16px 0;
  }
  aside.sidebar.open { transform: translateX(0); }
  body { padding-bottom: calc(var(--bottombar-h) + var(--safe-bottom) + 8px); }
  .bottombar { display: block; }
}

@media (max-width:640px) {
  .grid-3 { grid-template-columns: 1fr; }
}

/* Hero en layout para spacing global */
.hero {
  border: 1px solid var(--stroke);
  border-radius: var(--radius-xl);
  background: linear-gradient(145deg, rgba(255,255,255,.07), rgba(255,255,255,.03));
  padding: 24px; position: relative; overflow: hidden;
}
.spark {
  position: absolute; inset: auto -60px -60px auto; width:420px; height:420px; border-radius:50%;
  background: radial-gradient(closest-side, var(--spark), transparent);
  filter: blur(10px); pointer-events: none;
}

==== /webchat\styles\layout.css ====

==== webchat\styles\phone-lab.css ====
/* ===== Phone Lab / Softphone embebido ===== */

.iframe-shell { border:1px solid var(--stroke); border-radius:16px; overflow:hidden; background: var(--card); }
.iframe-placeholder { display:grid; place-items:center; height:520px; color: var(--muted); }
iframe.softphone { width:100%; height:520px; border:0; background:#0f1319; }

/* Pequeños pills del softphone inline reutilizan .pill, .mono, .btn de components.css */

==== /webchat\styles\phone-lab.css ====

==== webchat\styles\video.css ====
/* ===== Video ===== */

.video-shell {
  border-top:1px solid var(--stroke);
  border-bottom:1px solid var(--stroke);
  padding:12px 16px;
  background: rgba(255,255,255,.04);
}

.video-grid {
  display:grid;
  grid-template-columns: repeat(auto-fit, minmax(240px, 1fr));
  gap:14px;
}

.video-pane {
  background:#0d1422;
  border:1px solid var(--stroke);
  border-radius:12px;
  padding:10px;
  min-height:180px;
  color:#fff;
}
.video-pane h4 { margin:0 0 8px 0; font-size:12px; font-weight:700; color:#cbd6e5; }
video { width:100%; height:auto; border-radius:10px; }

/* Responsive: single column */
@media (max-width:920px) { .video-grid { grid-template-columns: 1fr; } }

==== /webchat\styles\video.css ====

==== webchat\ui\dom.js ====
export const byId = (id) => document.getElementById(id);
export const qs   = (sel) => document.querySelector(sel);
export const qsa  = (sel) => document.querySelectorAll(sel);

export function show(el){ el && el.classList.remove('hidden'); }
export function hide(el){ el && el.classList.add('hidden'); }

export function scrollToBottom(ul){
  try { ul?.lastElementChild?.scrollIntoView({ behavior:'smooth' }); } catch {}
}

==== /webchat\ui\dom.js ====

==== webchat\ui\forms.view.js ====
import { byId, show, hide } from './dom.js';
import { toast } from './toast.js';
import { bus } from '../services/bus.js';
import { SessionStore } from '../services/session.store.js';
import { API_BASE } from '../services/config.js';
import { attachPreviewTracks } from './video.view.js';

export function initFormsUI({ chat, video }){
  const startForm     = byId('start-form');
  const chatContainer = byId('chat-container');
  const messageForm   = byId('message-form');
  const messageInput  = byId('message-input');
  const startVideoBtn = byId('start-video');
  const endVideoBtn   = byId('end-video');
  const endChatBtn    = byId('end-chat');
  const copyBtn       = byId('copy-transcript');

  // Prefill name/email
  const nameEl  = byId('name');
  const emailEl = byId('email');
  if (nameEl && SessionStore.name)  nameEl.value  = SessionStore.name;
  if (emailEl && SessionStore.email) emailEl.value = SessionStore.email;

  let currentSid = null;

  // Submit start form
  startForm?.addEventListener('submit', async (e) => {
    e.preventDefault();
    const name  = (byId('name')?.value || '').trim();
    const email = (byId('email')?.value || '').trim().toLowerCase();

    try {
      // Persistir UX
      SessionStore.name = name;
      SessionStore.email = email;

      // Crear conversación + join + abrir (controller maneja todo)
      const convo = await chat.startNew({ name, email });
      if (!convo) {
        alert('Could not open the conversation yet. Please retry.');
        return;
      }

      // Seed message (no bloqueante)
      fetch(`${API_BASE}/api/conversations/${convo.sid}/messages`, {
        method: 'POST', headers: { 'Content-Type':'application/json' },
        body: JSON.stringify({ author: 'system', body: 'Thanks! An agent will join shortly.' })
      }).catch(()=>{});

    } catch (err) {
      console.error(err);
      alert('Unexpected error starting chat.');
    }
  });

  // Enviar mensaje
  messageForm?.addEventListener('submit', async (e) => {
    e.preventDefault();
    const body = (messageInput?.value || '').trim();
    if (!body || !currentSid) return;
    try {
      await chat.send(body);
      if (messageInput) messageInput.value = '';
    } catch (err) {
      console.error('sendMessage failed', err);
    }
  });

  // Video start/stop
  startVideoBtn?.addEventListener('click', async () => {
    if (!currentSid) { toast('Open the chat first'); return; }
    try { await video.start(currentSid, attachPreviewTracks); } catch (e) {
      console.error('[webchat] startVideo failed:', e);
      alert('Could not start the video call. Check console and server vars.');
    }
  });

  endVideoBtn?.addEventListener('click', () => {
    try { video.end(); } catch {}
    // Mensaje lo mandamos vía main.js hook
  });

  // End chat
  endChatBtn?.addEventListener('click', async () => {
    try { video.end(); } catch {}
    await chat.end();
  });

  // Copiar transcript (simple)
  copyBtn?.addEventListener('click', async () => {
    const nodes = document.querySelectorAll('#messages li .bubble, #messages li .time');
    const lines = [];
    let current = '';
    nodes.forEach(n => {
      if (n.classList.contains('time')) {
        current = `[${n.textContent}] `;
      } else {
        lines.push(`${current}${n.textContent}`);
        current = '';
      }
    });
    try { await navigator.clipboard.writeText(lines.join('\n')); toast('Copied'); } catch {}
  });

  // Eventos del bus (UI high-level)
  bus.on('chat:ready', ({ sid }) => {
    currentSid = sid;
    hide(startForm);
    show(chatContainer);
  });

  bus.on('video:feature', ({ enabled }) => {
    const btn = byId('start-video');
    if (btn) (enabled ? show(btn) : hide(btn));
  });

  bus.on('chat:ended', () => {
    currentSid = null;
    show(startForm);
    hide(chatContainer);
    toast('Chat ended');
  });
}

==== /webchat\ui\forms.view.js ====

==== webchat\ui\messages.view.js ====
import { bus } from '../services/bus.js';
import { byId, scrollToBottom } from './dom.js';
import { SessionStore } from '../services/session.store.js';

// Búsqueda perezosa (el parcial puede tardar milisegundos en insertarse)
function getMessagesEl() {
  return byId('messages');
}

function appendMessage(author, body) {
  const el = getMessagesEl();
  if (!el) return; // UI aún no montada
  const li = document.createElement('li');
  const bubble = document.createElement('div');
  bubble.className = 'bubble' + (author === (SessionStore.identity || 'me') ? ' me' : '');
  bubble.textContent = body || '';
  const time = document.createElement('span');
  time.className = 'time';
  time.textContent = new Date().toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
  if (author === SessionStore.identity) { li.appendChild(time); li.appendChild(bubble); }
  else { li.appendChild(bubble); li.appendChild(time); }
  el.appendChild(li);
  scrollToBottom(el);
}

bus.on('messages:reset', (items = []) => {
  const el = getMessagesEl();
  if (!el) return;
  el.innerHTML = '';
  items.forEach(m => appendMessage(m.author || 'system', m.body || ''));
});

bus.on('messages:added', (m) => appendMessage(m.author || 'system', m.body || ''));
bus.on('messages:echo',  (m) => appendMessage(m.author || 'me',     m.body || ''));
bus.on('chat:ended', () => {
  const el = getMessagesEl();
  if (el) el.innerHTML = '';
});

==== /webchat\ui\messages.view.js ====

==== webchat\ui\shell.ui.js ====
import { byId, qs, qsa } from './dom.js';
import { toast } from './toast.js';
import { API_BASE, DEMO, LS } from '../services/config.js';

// Footer year
try { byId('year').textContent = new Date().getFullYear(); } catch {}

// Theme toggle
byId('toggle-theme')?.addEventListener('click', () => {
  document.body.classList.toggle('light');
  try { localStorage.setItem(LS.THEME, document.body.classList.contains('light') ? 'light' : 'dark'); } catch {}
});
(function(){
  try {
    const t = localStorage.getItem(LS.THEME);
    if (t === 'light') document.body.classList.add('light');
  } catch {}
})();

// Drawer mobile
const drawer   = byId('drawer');
const backdrop = byId('backdrop');
const menuBtn  = byId('menuBtn');
function openDrawer(){ drawer?.classList.add('open'); backdrop?.classList.add('show'); }
function closeDrawer(){ drawer?.classList.remove('open'); backdrop?.classList.remove('show'); }
menuBtn?.addEventListener('click', openDrawer);
backdrop?.addEventListener('click', closeDrawer);

// FAB (Start chat)
byId('fabStart')?.addEventListener('click', () => {
  location.hash = '#chat';
  setTimeout(() => byId('name')?.focus(), 120);
});

// Copy pills (portal)
function hookCopyButtons(){
  qsa('[data-copy]').forEach(btn => {
    btn.addEventListener('click', () => {
      const sel = btn.getAttribute('data-copy');
      const node = document.querySelector(sel);
      if(node){ navigator.clipboard.writeText(node.textContent).then(()=> toast('Copied')); }
    });
  });
}

// Portal fields
(function(){
  const portalInput = byId('agentPortalUrl');
  const openPortal  = byId('openPortal');
  const agentIdPill   = byId('agentId-pill');
  const workerSidPill = byId('workerSid-pill');
  const identityPill  = byId('identity-pill');

  if(portalInput){ portalInput.value = DEMO.agentPortalUrl || portalInput.value; }
  if(agentIdPill){   agentIdPill.textContent   = DEMO.agentId; }
  if(workerSidPill){ workerSidPill.textContent = DEMO.workerSid; }
  if(identityPill){  identityPill.textContent  = DEMO.identity; }

  if(openPortal){
    openPortal.addEventListener('click', () => {
      const url = portalInput.value.trim() || DEMO.agentPortalUrl;
      if(!url) return toast('Set the Agent Portal URL first');
      window.open(url, '_blank', 'noopener');
    });
  }
  hookCopyButtons();
})();

// Tabs / Sidebar active
const sections = ['#kb','#chat','#agent-portal','#phone-lab','#status','#how'];
const allTargets = sections.map(id => document.querySelector(id)).filter(Boolean);
const sideLinks  = qsa('.menu .nav-link');
const tabLinks   = qsa('.bottombar .tab');

function setActive(href){
  sideLinks.forEach(a => a.classList.toggle('active', a.getAttribute('href') === href));
  tabLinks.forEach(a => a.classList.toggle('active', a.getAttribute('href') === href));
}
const io = new IntersectionObserver((entries) => {
  entries.filter(e => e.isIntersecting).forEach(e => setActive('#'+e.target.id));
},{
  root: null,
  rootMargin: `-${parseInt(getComputedStyle(document.documentElement).getPropertyValue('--topbar-h')) + 24}px 0px -40% 0px`,
  threshold: 0.3
});
allTargets.forEach(el => io.observe(el));
sideLinks.forEach(a => a.addEventListener('click', closeDrawer));
tabLinks.forEach(a => a.addEventListener('click', () => setActive(a.getAttribute('href'))));

/* ======================================================
   Phone Lab + Softphone (Twilio Voice WebRTC)
   ====================================================== */
const profileSelect   = byId('customerProfile');
const callerId        = byId('callerId');
const ivrNumber       = byId('ivrNumber');
const scenario        = byId('scenario');
const dtmf            = byId('dtmf');
const locale          = byId('locale');
const launchSoftphone = byId('launchSoftphone');
const startCallBtn    = byId('startCall');

const softWrap = byId('softphoneWrap');

// Estado Voice
let voiceDevice = null;
let voiceConn = null;
let voiceIdentity = null;
let callTimerInt = null;
let callStartTs = 0;

// ===== UI Softphone Inline =====
function mountInlineSoftphoneUI() {
  if (!softWrap) return;
  const html = `
    <div id="softphonePanel" style="display:grid;gap:12px;padding:12px">
      <div class="row wrap" style="justify-content:space-between;align-items:center">
        <div class="pill mono" id="sp-status">Idle</div>
        <div class="pill mono" id="sp-timer">00:00</div>
      </div>
      <div class="row wrap" style="gap:8px">
        <button class="btn" id="sp-call" type="button">Call</button>
        <button class="btn" id="sp-hang" type="button" disabled>Hang up</button>
        <button class="btn" id="sp-mute" type="button" disabled>Mute</button>
        <button class="btn" id="sp-unmute" type="button" disabled>Unmute</button>
        <button class="btn" id="sp-keypad-toggle" type="button">Keypad</button>
      </div>
      <div id="sp-keypad" class="card" style="display:none;padding:12px;border:1px solid var(--stroke);border-radius:12px;background:var(--card)">
        <div style="display:grid;grid-template-columns:repeat(3,1fr);gap:8px">
          ${['1','2','3','4','5','6','7','8','9','*','0','#'].map(d => `<button class="btn" data-digit="${d}" type="button">${d}</button>`).join('')}
        </div>
      </div>
      <div class="row wrap" style="gap:8px">
        <span class="pill mono">From: <span id="sp-from">${DEMO.outboundFromNumber || ''}</span></span>
        <span class="pill mono">To: <span id="sp-to">${DEMO.ivrNumber || ''}</span></span>
      </div>
    </div>
  `;
  softWrap.className = 'iframe-placeholder';
  softWrap.innerHTML = html;

  byId('sp-keypad-toggle')?.addEventListener('click', () => {
    const pad = byId('sp-keypad');
    if (pad) pad.style.display = pad.style.display === 'none' ? 'block' : 'none';
  });
  byId('sp-keypad')?.addEventListener('click', (e) => {
    const btn = e.target.closest('button[data-digit]');
    if (!btn) return;
    const d = btn.getAttribute('data-digit');
    try { voiceConn?.sendDigits?.(d); } catch {}
  });
  byId('sp-call')?.addEventListener('click', startCallFromUI);
  byId('sp-hang')?.addEventListener('click', endWebRTCCall);
  byId('sp-mute')?.addEventListener('click', () => voiceConn?.mute?.(true));
  byId('sp-unmute')?.addEventListener('click', () => voiceConn?.mute?.(false));
}
mountInlineSoftphoneUI();

// Perfiles: asegura Alex seleccionado y campos pre-rellenados
if(profileSelect){
  (DEMO.customerProfiles || []).forEach(p => {
    const opt = document.createElement('option');
    opt.value = p.id; opt.textContent = p.name;
    profileSelect.appendChild(opt);
  });
  profileSelect.addEventListener('change', syncProfileToFields);
  if (profileSelect.options.length) profileSelect.selectedIndex = 0; // Alex por defecto
  syncProfileToFields();
}
function syncProfileToFields(){
  const p = (DEMO.customerProfiles || []).find(x => x.id === profileSelect.value);
  if(!p) return;
  callerId.value = p.callerId || '';
  ivrNumber.value = DEMO.ivrNumber || '';
  scenario.value = p.scenario || '';
  dtmf.value = p.dtmf || '';
  locale.value = p.locale || 'en-US';
  const spFrom = byId('sp-from'); const spTo = byId('sp-to');
  if (spFrom) spFrom.textContent = callerId.value || DEMO.outboundFromNumber || '';
  if (spTo) spTo.textContent = ivrNumber.value || DEMO.ivrNumber || '';
}

// Softphone externo opcional
if(launchSoftphone){
  launchSoftphone.addEventListener('click', () => {
    const url = DEMO.softphoneUrl;
    if(!url){ return toast('Set DEMO.softphoneUrl to load the softphone'); }
    const wrap = byId('softphoneWrap');
    if (!wrap) return;
    const iframe = document.createElement('iframe');
    iframe.className = 'softphone';
    iframe.src = url;
    wrap.replaceWith(iframe);
    toast('Softphone loaded');
  });
}

// ===== Voice (Twilio Device) =====
function hasVoiceSDK(){
  return !!(window.Twilio?.Device || window.Twilio?.Voice?.Device || window.Device);
}
async function fetchVoiceToken(identityHint='softphone:alex'){
  const r = await fetch(`${API_BASE}/demo/token/voice?identity=${encodeURIComponent(identityHint)}`);
  if(!r.ok) throw new Error('voice token http '+r.status);
  return r.json(); // { token, identity }
}
async function ensureVoiceDevice(identityHint){
  const DeviceCtor = window.Twilio?.Device || window.Twilio?.Voice?.Device || window.Device;
  if(!DeviceCtor) throw new Error('Twilio Voice SDK not loaded');
  if(voiceDevice) return voiceDevice;

  const { token, identity } = await fetchVoiceToken(identityHint);
  voiceIdentity = identity;

  voiceDevice = new DeviceCtor(token, {
    logLevel: 'error',
    codecPreferences: ['opus','pcmu'],
  });

  voiceDevice.on('registered', () => setStatus('Ready'));
  voiceDevice.on('error', (e) => { console.error('[Voice] error', e); setStatus('Error'); });

  voiceDevice.on('tokenWillExpire', async () => {
    try {
      const { token: next } = await fetchVoiceToken(identity);
      if (typeof voiceDevice.updateToken === 'function') voiceDevice.updateToken(next);
    } catch (err) {
      console.warn('[Voice] token refresh failed', err);
    }
  });

  if (typeof voiceDevice.register === 'function') {
    await voiceDevice.register();
  }
  setStatus('Ready');
  return voiceDevice;
}

function setStatus(label){
  const el = byId('sp-status');
  if(el) el.textContent = label;
}
function setButtons({ calling=false, inCall=false } = {}){
  const callBtn   = byId('sp-call');
  const hangBtn   = byId('sp-hang');
  const muteBtn   = byId('sp-mute');
  const unmuteBtn = byId('sp-unmute');
  if (callBtn)   callBtn.disabled   = calling || inCall;
  if (hangBtn)   hangBtn.disabled   = !(calling || inCall);
  if (muteBtn)   muteBtn.disabled   = !inCall;
  if (unmuteBtn) unmuteBtn.disabled = !inCall;
}
function startTimer(){
  callStartTs = Date.now();
  const t = byId('sp-timer');
  clearInterval(callTimerInt);
  callTimerInt = setInterval(() => {
    const s = Math.floor((Date.now()-callStartTs)/1000);
    const mm = String(Math.floor(s/60)).padStart(2,'0');
    const ss = String(s%60).padStart(2,'0');
    if(t) t.textContent = `${mm}:${ss}`;
  }, 1000);
}
function stopTimer(){
  clearInterval(callTimerInt);
  const t = byId('sp-timer');
  if(t) t.textContent = '00:00';
}

function wireConnectionEvents(conn, autoDtmf){
  conn.on('accept', () => {
    setStatus('In call'); setButtons({ calling:false, inCall:true }); startTimer();
    if (autoDtmf) {
      const digits = String(autoDtmf).trim().replace(/[^\d\-w]/g,'').replace(/-+/g,'w');
      if (digits) setTimeout(() => voiceConn?.sendDigits?.(digits), 1200);
    }
  });
  conn.on('mute', (isMuted) => setStatus(isMuted ? 'Muted' : 'In call'));
  conn.on('reject', () => { setStatus('Rejected'); setButtons({ calling:false, inCall:false }); stopTimer(); voiceConn=null; });
  conn.on('disconnect', () => { setStatus('Idle');     setButtons({ calling:false, inCall:false }); stopTimer(); voiceConn=null; });
  conn.on('error', (e) => { console.error('[VoiceConn] error', e); setStatus('Error'); setButtons({ calling:false, inCall:false }); stopTimer(); });
}

async function startWebRTCCall({ to, from, autoDtmf }){
  const DeviceCtor = window.Twilio?.Device || window.Twilio?.Voice?.Device || window.Device;
  if(!DeviceCtor) throw new Error('Twilio Voice SDK not loaded');

  const dev = await ensureVoiceDevice('softphone:alex');
  setStatus('Calling…'); setButtons({ calling:true, inCall:false });

  // En v2, connect retorna Call sincronamente
  const conn = dev.connect({ params: { To: to, callerId: from } });
  voiceConn = conn;
  wireConnectionEvents(conn, autoDtmf);
}

function endWebRTCCall(){
  try {
    if (voiceConn?.disconnect) voiceConn.disconnect();
    else if (voiceDevice?.disconnectAll) voiceDevice.disconnectAll();
  } catch {}
  voiceConn = null;
  setStatus('Idle'); setButtons({ calling:false, inCall:false }); stopTimer();
}

async function startCallFromUI(){
  const to   = (ivrNumber.value || DEMO.ivrNumber || '').trim();
  const from = (callerId.value || DEMO.outboundFromNumber || '').trim();
  const autoDtmf = (dtmf.value || '').trim();

  const ALLOWED_TO = ['+12058275832'];
  if (!ALLOWED_TO.includes(to)) return toast('Por ahora sólo: +12058275832');

  // 1) Intentar WebRTC
  try{
    if (hasVoiceSDK()) {
      await startWebRTCCall({ to, from, autoDtmf });
      return;
    }
  } catch (err) {
    console.error('[WebRTC] init/connect failed → falling back to REST', err);
  }

  // 2) Fallback REST (server-side dial)
  try{
    const res = await fetch(`${API_BASE}/demo/call/start`, {
      method:'POST',
      headers:{'Content-Type':'application/json'},
      body: JSON.stringify({ to, from, dtmf: autoDtmf })
    });
    if(!res.ok) throw new Error('HTTP '+res.status);
    toast(`Call started → ${to} as ${from}`);
    setStatus('Server call (no WebRTC)');
  } catch (err) {
    console.error('[REST fallback] failed:', err);
    toast('Could not start the call');
    setStatus('Error');
  }
}

// Botón “Start call”
if(startCallBtn){
  startCallBtn.addEventListener('click', startCallFromUI);
}

// =========================
// Service Status checks
// =========================

async function refreshStatus(){
  const kHealth = byId('kpi-health');
  const kAgents = byId('kpi-agents');
  const kVideo  = byId('kpi-video');

  if (!kHealth || !kAgents || !kVideo) return; // parcial aún no montado

  try{
    const h = await fetch(`${API_BASE}/api/health`).then(r=>r.json()).catch(()=>({ok:false}));
    kHealth.textContent = h && h.ok ? 'OK' : 'Down';

    const p = await fetch(`${API_BASE}/api/taskrouter/presence`).then(async r=>{
      try { return await r.json(); } catch { return []; }
    }).catch(()=>[]);
    const online = Array.isArray(p) ? p.filter(x=>x.available).length : 0;
    kAgents.textContent = String(online);

    const v = await fetch(`${API_BASE}/api/video/enabled`).then(r=>r.json()).catch(()=>({enabled:false}));
    kVideo.textContent = v && v.enabled ? 'Enabled' : 'Disabled';
  }catch(e){
    kHealth.textContent='—'; kAgents.textContent='—'; kVideo.textContent='—';
  }
}

// Enlazamos el botón cuando exista
(function hookStatusUI(){
  const btnRefresh = byId('refresh-status');
  if (btnRefresh) btnRefresh.addEventListener('click', refreshStatus);
})();
refreshStatus();

==== /webchat\ui\shell.ui.js ====

==== webchat\ui\toast.js ====
export function toast(text){
  let node = document.getElementById('toast');
  if(!node){
    node = document.createElement('div');
    node.id='toast';
    node.style.position='fixed';
    node.style.bottom='calc(var(--bottombar-h) + var(--safe-bottom) + 16px)';
    node.style.right='max(16px, calc(16px + var(--safe-right)))';
    node.style.padding='12px 16px';
    node.style.border='1px solid var(--stroke)';
    node.style.borderRadius='12px';
    node.style.background='var(--card)';
    node.style.color='var(--text)';
    node.style.boxShadow='var(--shadow)';
    node.style.zIndex='9999';
    document.body.appendChild(node);
  }
  node.textContent = text;
  node.style.opacity = '1';
  setTimeout(()=>{ node.style.transition='opacity .5s'; node.style.opacity='0'; }, 1800);
}

==== /webchat\ui\toast.js ====

==== webchat\ui\video.view.js ====
import { bus } from '../services/bus.js';
import { byId, show, hide } from './dom.js';

const videoShell   = byId('video-container');
const localMedia   = byId('local-media');
const remoteMedia  = byId('remote-media');
const startVideoBtn= byId('start-video');
const endVideoBtn  = byId('end-video');

let currentRoom = null;

export function attachPreviewTracks(previewTracks){
  try {
    if(!localMedia) return;
    localMedia.innerHTML = '';
    previewTracks.forEach(t => localMedia.appendChild(t.attach()));
  } catch {}
}

function attachParticipant(p){
  const holder = remoteMedia;
  if(!holder) return;

  const attachTrack = (track) => {
    const el = track.attach();
    el.dataset.name = track.name;
    holder.appendChild(el);
  };
  const detachTrack = (track) => {
    try { track.detach().forEach(el => el.remove()); } catch {}
  };

  // Attach ya publicados
  p.tracks.forEach(pub => { if(pub.track) attachTrack(pub.track); });

  // Subscripciones
  p.on('trackSubscribed', attachTrack);
  p.on('trackUnsubscribed', detachTrack);

  // Cleanup al desconectar participante
  p.on('disconnected', () => {
    try { p.tracks.forEach(pub => pub.track?.detach()?.forEach(el => el.remove())); } catch {}
  });
}

bus.on('video:started', (room) => {
  currentRoom = room;
  // UI
  show(videoShell);
  hide(startVideoBtn);
  show(endVideoBtn);

  // Limpiar contenedores remotos
  if (remoteMedia) remoteMedia.innerHTML = '';

  // Adjuntar participantes existentes
  Array.from(room.participants.values()).forEach(attachParticipant);

  // También podríamos escuchar aquí, pero el controller ya emite evento por cada participantConnected
  // room.on('participantConnected', attachParticipant); // redundante si escuchamos bus
});

bus.on('video:participant:connected', (p) => attachParticipant(p));

bus.on('video:ended', () => {
  try {
    // Detach tracks locales/remotos
    if (currentRoom) {
      try { currentRoom.localParticipant.tracks.forEach(pub => pub.track?.detach()?.forEach(el => el.remove())); } catch {}
    }
    if (remoteMedia) remoteMedia.innerHTML = '';
  } catch {}
  currentRoom = null;
  // UI
  hide(endVideoBtn);
  show(startVideoBtn);
  hide(videoShell);
});

==== /webchat\ui\video.view.js ====

