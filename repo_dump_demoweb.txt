==== webchat\chat.js ====
// samples/webchat/chat.js
const API_BASE = window.API_BASE || 'http://localhost:4000';

(function () {
  // ---------- DOM ----------
  const startForm = document.getElementById('start-form');
  const chatContainer = document.getElementById('chat-container');
  const messagesEl = document.getElementById('messages');
  const messageForm = document.getElementById('message-form');
  const messageInput = document.getElementById('message-input');

  // Video UI
  const startVideoBtn = document.getElementById('start-video');
  const endVideoBtn = document.getElementById('end-video');
  const endChatBtn = document.getElementById('end-chat');
  const videoShell = document.getElementById('video-container');
  const localMedia = document.getElementById('local-media');
  const remoteMedia = document.getElementById('remote-media');

  // ---------- Local Storage Keys ----------
  const LS = {
    NAME: 'wxs_name',
    EMAIL: 'wxs_email',
    IDENTITY: 'wxs_guest_identity',
    CONVO: 'wxs_conversation_sid',
    VIDEO_ACTIVE: 'wxs_video_active',
  };

  // ---------- State ----------
  let conversation = null;
  let client = null;
  let guestIdentity = null;

  // Twilio Video room (guest)
  let videoRoom = null;

  // ---------- Helpers ----------
  function show(el) { el && el.classList.remove('hidden'); }
  function hide(el) { el && el.classList.add('hidden'); }
  function scrollToBottom() { messagesEl.lastElementChild?.scrollIntoView({ behavior: 'smooth' }); }
  function toast(text) {
    let node = document.getElementById('toast');
    if (!node) {
      node = document.createElement('div');
      node.id = 'toast';
      node.style.position = 'fixed';
      node.style.bottom = '24px';
      node.style.right = '24px';
      node.style.padding = '12px 16px';
      node.style.border = '1px solid var(--stroke)';
      node.style.borderRadius = '12px';
      node.style.background = 'var(--card)';
      node.style.color = 'var(--text)';
      node.style.boxShadow = 'var(--shadow)';
      document.body.appendChild(node);
    }
    node.textContent = text;
    node.style.opacity = '1';
    setTimeout(() => { node.style.transition = 'opacity .5s'; node.style.opacity = '0'; }, 1800);
  }

  function saveSession() {
    try {
      if (guestIdentity) localStorage.setItem(LS.IDENTITY, guestIdentity);
      if (conversation?.sid) localStorage.setItem(LS.CONVO, conversation.sid);
    } catch {}
  }

  function clearSession() {
    try {
      localStorage.removeItem(LS.CONVO);
      localStorage.removeItem(LS.IDENTITY);
      localStorage.removeItem(LS.VIDEO_ACTIVE);
      // Keep name/email so the form stays prefilled
    } catch {}
  }

  async function fetchGuestToken() {
    const identityQs = guestIdentity ? `?identity=${encodeURIComponent(guestIdentity)}` : '';
    const url = `${API_BASE}/api/chat/${guestIdentity ? 'refresh' : 'token'}/guest${identityQs}`;
    const res = await fetch(url);
    if (!res.ok) throw new Error(`Token error: ${res.status}`);
    const data = await res.json();
    if (data.identity) guestIdentity = data.identity; // e.g., guest:uuid
    // Persist identity so a reload restores the same session
    try { localStorage.setItem(LS.IDENTITY, guestIdentity); } catch {}
    return data.token;
  }

  function appendMessage(author, body) {
    const li = document.createElement('li');
    const bubble = document.createElement('div');
    bubble.className = 'bubble' + (author === guestIdentity ? ' me' : '');
    bubble.textContent = body || '';
    const time = document.createElement('span');
    time.className = 'time';
    time.textContent = new Date().toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
    if (author === guestIdentity) { li.appendChild(time); li.appendChild(bubble); }
    else { li.appendChild(bubble); li.appendChild(time); }
    messagesEl.appendChild(li);
    scrollToBottom();
  }

  function attachLocalTracks(room) {
    if (!room || !localMedia) return;
    localMedia.innerHTML = '';
    room.localParticipant.tracks.forEach(pub => {
      const track = pub.track;
      if (!track) return;
      const el = track.attach();
      el.dataset.name = track.name;
      localMedia.appendChild(el);
    });
  }

  function attachParticipant(p) {
    const holder = remoteMedia;
    if (!holder) return;

    // Attach already published tracks
    p.tracks.forEach(pub => {
      if (!pub.track) return;
      const el = pub.track.attach();
      el.dataset.name = pub.track.name;
      holder.appendChild(el);
    });

    // Subscribe to new tracks
    const onSub = (track) => {
      const el = track.attach();
      el.dataset.name = track.name;
      holder.appendChild(el);
    };
    const onUnsub = (track) => {
      try { track.detach().forEach(el => el.remove()); } catch {}
    };
    p.on('trackSubscribed', onSub);
    p.on('trackUnsubscribed', onUnsub);

    // Cleanup
    p.on('disconnected', () => {
      try { p.tracks.forEach(pub => pub.track?.detach()?.forEach(el => el.remove())); } catch {}
    });
  }

  async function startVideoSession(auto = false) {
    try {
      if (!conversation) {
        if (!auto) toast('Open the chat first');
        return;
      }
      if (videoRoom) return; // already running

      const Video = window.Twilio && window.Twilio.Video;
      if (!Video) {
        alert('Twilio Video SDK is not loaded (check the CDN script).');
        return;
      }

      // Ensure/create a room for this conversation on your backend
      const ensureRes = await fetch(`${API_BASE}/api/video/ensure-room`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ conversationSid: conversation.sid, identity: guestIdentity }),
      });
      if (!ensureRes.ok) throw new Error(`ensure-room failed: ${ensureRes.status}`);
      const { roomName } = await ensureRes.json();

      // Get a fresh guest token
      const tokRes = await fetch(
        `${API_BASE}/api/video/token/guest?identity=${encodeURIComponent(guestIdentity)}&roomName=${encodeURIComponent(roomName)}`
      );
      if (!tokRes.ok) throw new Error(`video token failed: ${tokRes.status}`);
      const { token } = await tokRes.json();

      // Optional: pre-create local tracks so the browser prompts immediately
      const previewTracks = await Video.createLocalTracks({ audio: true, video: { width: 640 } });
      // Attach preview immediately
      try {
        localMedia.innerHTML = '';
        previewTracks.forEach(t => localMedia.appendChild(t.attach()));
      } catch {}

      // Connect using the same tracks (no double capture)
      videoRoom = await Video.connect(token, {
        name: roomName,
        tracks: previewTracks,
      });

      // Attach remote participants
      remoteMedia && (remoteMedia.innerHTML = '');
      Array.from(videoRoom.participants.values()).forEach(attachParticipant);
      videoRoom.on('participantConnected', attachParticipant);

      // Disconnect cleanup
      videoRoom.on('disconnected', () => {
        try {
          videoRoom.localParticipant.tracks.forEach(pub => pub.track?.detach()?.forEach(el => el.remove()));
          remoteMedia && (remoteMedia.innerHTML = '');
        } catch {}
        videoRoom = null;
        hide(endVideoBtn);
        show(startVideoBtn);
        hide(videoShell);
        try { localStorage.removeItem(LS.VIDEO_ACTIVE); } catch {}
      });

      // UI
      show(videoShell);
      hide(startVideoBtn);
      show(endVideoBtn);
      try { localStorage.setItem(LS.VIDEO_ACTIVE, '1'); } catch {}

      // Notify in chat (non-blocking)
      try { await conversation.sendMessage('[system] Video call started'); } catch {}
    } catch (e) {
      console.error('[webchat] startVideoSession failed:', e);
      if (!auto) alert('Could not start the video call. Check console and server vars.');
      try { localStorage.removeItem(LS.VIDEO_ACTIVE); } catch {}
    }
  }

  async function endVideoSession() {
    try { if (videoRoom) videoRoom.disconnect(); } catch {}
    hide(endVideoBtn);
    show(startVideoBtn);
    hide(videoShell);
    try { localStorage.removeItem(LS.VIDEO_ACTIVE); } catch {}
    try { await conversation?.sendMessage('[system] Video call ended'); } catch {}
  }

  // Ensure we disconnect video if the user navigates away
  window.addEventListener('beforeunload', () => {
    try { videoRoom && videoRoom.disconnect(); } catch {}
  });

  // ---------- Core boot / resume ----------
  async function initClientAndOpenConversation(conversationSid) {
    // 1) Fetch/refresh token (reusing identity if we have it)
    const token = await fetchGuestToken();

    // 2) Init Conversations client
    if (!window.Twilio?.Conversations?.Client) {
      alert('Twilio Conversations SDK failed to load.');
      return null;
    }
    client = new window.Twilio.Conversations.Client(token);

    // Refresh token hooks
    client.on('tokenAboutToExpire', async () => {
      try { await client.updateToken(await fetchGuestToken()); } catch (e2) { console.error('Guest token refresh failed', e2); }
    });
    client.on('tokenExpired', async () => {
      try { await client.updateToken(await fetchGuestToken()); } catch (e2) { console.error('Guest token refresh (expired) failed', e2); }
    });

    if (client.state !== 'initialized') {
      await new Promise((resolve) =>
        client.on('stateChanged', (state) => state === 'initialized' && resolve())
      );
    }

    // 3) Get conversation by SID
    let convo = null;
    const maxTries = 6, delayMs = 800;
    for (let i = 0; i < maxTries; i++) {
      try {
        convo = await client.getConversationBySid(conversationSid);
        break;
      } catch (err) {
        const msg = String(err?.message || '').toLowerCase();
        if (msg.includes('forbidden') || msg.includes('401') || msg.includes('403')) {
          await new Promise((r) => setTimeout(r, delayMs));
          continue;
        }
        throw err;
      }
    }
    if (!convo) return null;

    conversation = convo;
    saveSession();

    // 4) Load recent messages
    try {
      const page = await conversation.getMessages();
      messagesEl.innerHTML = '';
      page.items.forEach((m) => appendMessage(m.author || 'system', m.body || ''));
    } catch (e) {
      console.warn('Failed to load message history', e);
    }

    // 5) Bind events & show UI
    if (!window.__twilioBound) {
      startVideoBtn?.addEventListener('click', () => startVideoSession(false));
      endVideoBtn?.addEventListener('click', endVideoSession);
      endChatBtn?.addEventListener('click', endChat);
      window.__twilioBound = true;
    }

    conversation.on('messageAdded', (msg) => {
      appendMessage(msg.author || 'system', msg.body || '');
    });

    hide(startForm);
    show(chatContainer);

    // 6) Enable/disable video button based on backend feature flag
    try {
      const r = await fetch(`${API_BASE}/api/video/enabled`);
      const data = await r.json().catch(() => ({}));
      if (data?.enabled) show(startVideoBtn);
      else hide(startVideoBtn);
    } catch {
      hide(startVideoBtn);
    }

    return conversation;
  }

  async function resumeFromStorage() {
    try {
      guestIdentity = localStorage.getItem(LS.IDENTITY) || null;
      const storedSid = localStorage.getItem(LS.CONVO);
      const wasVideoActive = !!localStorage.getItem(LS.VIDEO_ACTIVE);

      if (storedSid) {
        const convo = await initClientAndOpenConversation(storedSid);
        if (convo && wasVideoActive) {
          // Try to rejoin video after a small delay (so UI is visible)
          setTimeout(() => startVideoSession(true), 400);
        }
        return;
      }
      // No stored convo: show the form prefilled if we know name/email
      const nameEl = document.getElementById('name');
      const emailEl = document.getElementById('email');
      try {
        const n = localStorage.getItem(LS.NAME); if (n) nameEl.value = n;
        const e = localStorage.getItem(LS.EMAIL); if (e) emailEl.value = e;
      } catch {}
    } catch (e) {
      console.warn('Resume failed; falling back to fresh start', e);
    }
  }

  // ---------- New chat flow ----------
  startForm.addEventListener('submit', async (e) => {
    e.preventDefault();
    const name = document.getElementById('name').value.trim();
    const email = document.getElementById('email').value.trim().toLowerCase();

    try {
      // Persist for UX
      try { localStorage.setItem(LS.NAME, name); localStorage.setItem(LS.EMAIL, email); } catch {}

      // 1) Create or fetch conversation (uniqueName = email)
      const convoRes = await fetch(`${API_BASE}/api/conversations`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          uniqueName: email,
          friendlyName: name || email,
          attributes: { name, email },
        }),
      });
      if (!convoRes.ok) {
        const txt = await convoRes.text().catch(() => '');
        alert(`Failed to create conversation: ${txt}`);
        return;
      }
      const convoData = await convoRes.json();

      // 2) Guest token (this also sets guestIdentity)
      const token = await fetchGuestToken();

      // 3) Ensure participant membership
      try {
        const addRes = await fetch(
          `${API_BASE}/api/conversations/${convoData.sid}/participants`,
          {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
              type: 'chat',
              identity: guestIdentity,
              attributes: { name, email, role: 'guest' },
            }),
          }
        );
        if (!addRes.ok && addRes.status !== 409) {
          const errData = await addRes.json().catch(() => ({}));
          if (errData.error?.code !== 50433) {
            throw Object.assign(
              new Error(errData.error?.message || 'Failed to add participant'),
              { status: addRes.status, code: errData.error?.code }
            );
          }
        }
      } catch (err) {
        if (err.status !== 409 && err.code !== 50433) {
          alert('Failed to join conversation as participant.');
          return;
        }
      }

      // 4) Initialize client and open conversation
      const convo = await initClientAndOpenConversation(convoData.sid);
      if (!convo) {
        alert('Could not open the conversation yet. Please retry.');
        return;
      }

      // 5) Seed welcome message (non-blocking)
      fetch(`${API_BASE}/api/conversations/${convoData.sid}/messages`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ author: 'system', body: 'Thanks! An agent will join shortly.' }),
      }).catch(() => {});

    } catch (eAll) {
      console.error(eAll);
      alert('Unexpected error starting chat.');
    }
  });

  // ---------- Send message ----------
  messageForm.addEventListener('submit', async (e) => {
    e.preventDefault();
    const body = messageInput.value.trim();
    if (!body || !conversation) return;
    try {
      await conversation.sendMessage(body);
      appendMessage(guestIdentity || 'me', body);
      messageInput.value = '';
    } catch (err) {
      console.error('sendMessage failed', err);
    }
  });

  // ---------- End chat ----------
  async function endChat() {
    try {
      // Try to leave the conversation gracefully
      await conversation?.leave?.();
    } catch (e) {
      console.warn('leave() failed or unsupported', e);
    }
    try {
      // Optional backend close (idempotent; ignore failures)
      if (conversation?.sid) {
        fetch(`${API_BASE}/api/conversations/${conversation.sid}/close`, { method: 'POST' })
          .catch(() => {});
      }
    } catch {}
    await endVideoSession();
    clearSession();
    // Reset UI
    try { messagesEl.innerHTML = ''; } catch {}
    show(startForm);
    hide(chatContainer);
    toast('Chat ended');
  }

  // ---------- Boot ----------
  resumeFromStorage();
})();

==== /webchat\chat.js ====

==== webchat\index.html ====
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Website X — Concierge Support</title>
  <link rel="preconnect" href="https://fonts.googleapis.com"/>
  <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin/>
  <link href="https://fonts.googleapis.com/css2?family=Plus+Jakarta+Sans:wght@400;500;600;700&display=swap" rel="stylesheet"/>
  <style>
    /* ======= THEME ======= */
    :root{
      --bg: #0b0f14;
      --bg-2: #0e141b;
      --card: rgba(255,255,255,0.04);
      --card-2: rgba(255,255,255,0.06);
      --stroke: rgba(255,255,255,0.12);
      --text: #ecf1f8;
      --muted: #9fb0c5;
      --accent: #f1c14d; /* gold */
      --accent-2:#ffd98a;
      --success:#3ddc97;
      --danger:#ff6b6b;
      --shadow: 0 10px 30px rgba(0,0,0,.35);
      --radius-xl: 22px;
      --radius-lg: 16px;
      --radius: 12px;
      --glass: backdrop-filter: saturate(140%) blur(14px);
    }
    *{box-sizing:border-box}
    html,body{height:100%}
    body{
      margin:0; color:var(--text); background: radial-gradient(1200px 800px at 10% -10%, #263247 0%, rgba(38,50,71,0) 45%),
      radial-gradient(800px 600px at 90% 10%, #2b2131 0%, rgba(43,33,49,0) 40%),
      linear-gradient(180deg, var(--bg) 0%, var(--bg-2) 100%);
      font-family: "Plus Jakarta Sans", system-ui, -apple-system, Segoe UI, Roboto, Arial, sans-serif;
      letter-spacing:.2px;
    }

    /* ======= LAYOUT ======= */
    .page{display:grid; grid-template-columns: 290px 1fr; min-height:100vh}
    aside.sidebar{
      position:sticky; top:0; height:100vh; padding:24px; border-right:1px solid var(--stroke);
      background: linear-gradient(180deg, rgba(255,255,255,.03), rgba(255,255,255,.02));
    }
    .content{display:flex; flex-direction:column; min-width:0}
    header.topbar{
      position:sticky; top:0; z-index:20; padding:16px 24px; border-bottom:1px solid var(--stroke);
      background: linear-gradient(180deg, rgba(255,255,255,.06), rgba(255,255,255,.02));
      display:flex; align-items:center; gap:16px; justify-content:space-between; 
      box-shadow: 0 8px 24px rgba(0,0,0,.18);
    }
    main{padding:28px; display:grid; gap:28px}

    /* ======= SIDEBAR ======= */
    .brand{display:flex; align-items:center; gap:12px; margin-bottom:18px}
    .brand .logo{
      width:42px; height:42px; border-radius:12px; background: linear-gradient(135deg,#1a1f29,#0f1520);
      border:1px solid rgba(255,255,255,.1); display:grid; place-items:center; box-shadow: var(--shadow);
    }
    .brand .logo svg{width:22px; height:22px; color:var(--accent)}
    .brand .title{font-size:16px; font-weight:700; letter-spacing:.4px}

    nav.menu{margin-top:16px}
    .menu a{
      display:flex; gap:12px; align-items:center; text-decoration:none; color:var(--text);
      padding:12px 12px; border-radius:12px; border:1px solid transparent; transition:.2s ease;
    }
    .menu a:hover{background:var(--card); border-color:var(--stroke)}
    .menu svg{width:18px; height:18px; color:var(--muted)}
    .sidebar .cta{
      margin-top:auto; padding:16px; border:1px solid var(--stroke); border-radius:16px; background:var(--card);
    }
    .badge{display:inline-flex; align-items:center; gap:8px; font-size:12px; color:#0f1218; background:linear-gradient(180deg,var(--accent),var(--accent-2)); padding:6px 10px; border-radius:999px; font-weight:700}

    /* ======= TOPBAR ======= */
    .search{
      display:flex; align-items:center; gap:10px; flex:1; max-width:560px; 
      background:var(--card); border:1px solid var(--stroke); border-radius:999px; padding:10px 14px;
    }
    .search input{border:0; outline:0; flex:1; background:transparent; color:var(--text)}
    .actions{display:flex; align-items:center; gap:10px}
    .btn{display:inline-flex; align-items:center; gap:10px; padding:10px 14px; border-radius:12px; border:1px solid var(--stroke); background:var(--card); color:var(--text); cursor:pointer}
    .btn:hover{border-color:rgba(255,255,255,.2)}
    .btn.primary{background:linear-gradient(135deg, #1b1a12, #2e2615); border:1px solid #41351a; color:#f8e8c2; box-shadow: inset 0 1px 0 rgba(255,255,255,.06), 0 6px 20px rgba(0,0,0,.25)}

    /* ======= HERO ======= */
    .hero{
      border:1px solid var(--stroke); border-radius:var(--radius-xl); background:linear-gradient(145deg, rgba(255,255,255,.06), rgba(255,255,255,.02)); padding:28px; position:relative; overflow:hidden;
    }
    .hero h1{font-size:34px; line-height:1.1; margin:0 0 10px 0}
    .hero p{color:var(--muted); margin:0}
    .spark{
      position:absolute; inset:auto -60px -60px auto; width:380px; height:380px; border-radius:50%;
      background: radial-gradient(closest-side, rgba(241,193,77,.32), rgba(241,193,77,0)); filter: blur(10px);
      pointer-events:none;
    }

    /* ======= GRID ======= */
    .grid{display:grid; grid-template-columns: 1.1fr .9fr; gap:28px}
    .card{ border:1px solid var(--stroke); border-radius:var(--radius-lg); background:var(--card); box-shadow: var(--shadow); overflow:hidden }
    .card .card-body{padding:22px}
    .split{display:grid; grid-template-columns: 1fr 1fr; gap:14px}

    /* ======= START FORM ======= */
    #start-form{display:grid; gap:12px}
    .field{display:grid; gap:8px}
    .label{font-size:12px; color:var(--muted)}
    .input, select{ background: rgba(255,255,255,.04); border:1px solid var(--stroke); border-radius:12px; padding:12px 14px; color:var(--text); outline:none; transition: .2s border-color; }
    .input:focus, select:focus{border-color: rgba(255,255,255,.24)}
    .helper{font-size:12px; color:var(--muted)}
    .start-actions{display:flex; align-items:center; gap:12px}
    .start-actions .btn{height:44px}

    /* ======= CHAT ======= */
    .hidden{display:none !important}
    section.chat{display:grid; gap:18px}
    .chat-shell{ border:1px solid var(--stroke); border-radius:var(--radius-xl); overflow:hidden; background:linear-gradient(180deg, rgba(255,255,255,.06), rgba(255,255,255,.02)); }
    .chat-header{ display:flex; align-items:center; justify-content:space-between; gap:12px; padding:14px 16px; border-bottom:1px solid var(--stroke); background:linear-gradient(180deg, rgba(255,255,255,.08), rgba(255,255,255,.03)); }
    .agent{display:flex; align-items:center; gap:12px}
    .avatar{width:36px; height:36px; border-radius:50%; background:linear-gradient(135deg,#1a1f29,#0f1520); border:1px solid rgba(255,255,255,.12); display:grid; place-items:center}
    .status{display:inline-flex; align-items:center; gap:8px; font-size:12px; color:var(--muted)}
    .dot{width:8px; height:8px; border-radius:50%; background:var(--success); box-shadow:0 0 0 3px rgba(61,220,151,.15)}

    .toolbar{display:flex; align-items:center; gap:8px}

    /* Video */
    .video-shell{border-top:1px solid var(--stroke); border-bottom:1px solid var(--stroke); padding:12px 16px; background:rgba(255,255,255,.04)}
    .video-grid{display:grid; grid-template-columns: repeat(auto-fit, minmax(280px, 1fr)); gap:14px}
    .video-pane{background: #0d0f14; border:1px solid var(--stroke); border-radius:12px; padding:10px; min-height:200px; color:#fff}
    .video-pane h4{margin:0 0 8px 0; font-size:12px; font-weight:700; color:#cbd6e5}
    video{width:100%; height:auto; border-radius:10px}

    /* Messages */
    .messages-wrap{max-height:52vh; overflow:auto; padding:12px 16px}
    #messages{list-style:none; margin:0; padding:0; display:grid; gap:10px}
    #messages li{position:relative; display:flex; gap:10px; align-items:flex-end}
    .bubble{max-width:70%; padding:12px 14px; border-radius:16px; background:rgba(255,255,255,.06); border:1px solid var(--stroke); color:var(--text)}
    .bubble.me{margin-left:auto; background:linear-gradient(135deg, #1b1a12, #2e2615); border:1px solid #41351a; color:#fee8b0}
    .time{font-size:11px; color:var(--muted); margin:0 6px}

    /* Composer */
    .composer{display:flex; align-items:center; gap:10px; padding:12px 16px; border-top:1px solid var(--stroke)}
    .chip{display:inline-grid; place-items:center; width:40px; height:40px; border-radius:12px; border:1px solid var(--stroke); background:var(--card)}
    #message-input{flex:1; padding:12px 14px; border-radius:999px; border:1px solid var(--stroke); background:rgba(255,255,255,.04); outline:0; color:var(--text)}
    .send{padding:10px 16px; border-radius:999px; border:1px solid #3b3320; background:linear-gradient(135deg,#2c2414,#3b2f19); color:#ffe7b0; font-weight:700; cursor:pointer}
    .send:hover{filter:brightness(1.05)}

    /* Info card */
    .kpis{display:grid; grid-template-columns:repeat(3,1fr); gap:14px; margin-top:6px}
    .kpi{border:1px solid var(--stroke); border-radius:14px; padding:14px; background:var(--card-2)}
    .kpi .label{font-size:11px; color:var(--muted)}
    .kpi .value{font-size:18px; font-weight:800}

    /* Utility */
    .row{display:flex; gap:12px; align-items:center}
    .row.wrap{flex-wrap:wrap}
    .pill{display:inline-flex; align-items:center; gap:8px; padding:8px 12px; border:1px solid var(--stroke); background:var(--card); border-radius:999px}
    .small{font-size:12px; color:var(--muted)}
    .mono{font-family: ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, monospace}
    .grid-3{display:grid; grid-template-columns: repeat(3, 1fr); gap:14px}
    .grid-2{display:grid; grid-template-columns: repeat(2, 1fr); gap:14px}

    /* Portal & Phone Lab */
    .callout{padding:14px; border:1px dashed var(--stroke); border-radius:12px; background:rgba(255,255,255,.03)}
    .iframe-shell{border:1px solid var(--stroke); border-radius:16px; overflow:hidden; background:var(--card)}
    .iframe-placeholder{display:grid; place-items:center; height:520px; color:var(--muted)}
    iframe.softphone{width:100%; height:520px; border:0; background:#0f1319}

    /* Footer */
    footer{padding:18px 28px; border-top:1px solid var(--stroke); color:var(--muted)}

    /* Responsive */
    @media (max-width: 1080px){ .grid{grid-template-columns:1fr} .grid-3{grid-template-columns:1fr} }
    @media (max-width: 920px){ .page{grid-template-columns:1fr} aside.sidebar{position:static; height:auto; border-right:0; border-bottom:1px solid var(--stroke)} }
  </style>
</head>
<body>
  <div class="page">
    <!-- ======= SIDEBAR ======= -->
    <aside class="sidebar">
      <div class="brand" aria-label="Website X brand">
        <div class="logo" aria-hidden="true">
          <!-- Crown Icon -->
          <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.8" stroke-linecap="round" stroke-linejoin="round" aria-hidden="true">
            <path d="M3 7l4 3 5-6 5 6 4-3v10a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2z"/>
          </svg>
        </div>
        <div>
          <div class="badge" title="Premium support">CONCIERGE</div>
          <div class="title">Website X • Support</div>
        </div>
      </div>

      <nav class="menu" aria-label="Main menu">
        <a href="#" aria-current="page">
          <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.6"><path d="M3 12l2-2m0 0l7-7 7 7M5 10v10a1 1 0 001 1h3m10-11l2 2m-2-2v10a1 1 0 01-1 1h-3m-6 0h6"/></svg>
          Home
        </a>
        <a href="#kb">
          <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.6"><path d="M4 19.5A2.5 2.5 0 006.5 22H20"/><path d="M20 2H6.5A2.5 2.5 0 004 4.5V19"/><path d="M8 6h9"/><path d="M8 10h9"/><path d="M8 14h9"/></svg>
          Knowledge Base
        </a>
        <a href="#chat">
          <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.6"><path d="M21 15a4 4 0 01-4 4H7l-4 4V5a4 4 0 014-4h10a4 4 0 014 4z"/></svg>
          Customer Chat
        </a>
        <a href="#agent-portal">
          <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.6"><path d="M3 7h18M3 12h18M3 17h18"/></svg>
          Agent Portal
        </a>
        <a href="#phone-lab">
          <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.6"><path d="M22 16.92V21a2 2 0 0 1-2.18 2A19.86 19.86 0 0 1 3 6.18 2 2 0 0 1 5 4h4.09a2 2 0 0 1 2 1.72l.45 3a2 2 0 0 1-.57 1.73L9.91 12a16 16 0 0 0 6.18 6.18l1.55-1.05a2 2 0 0 1 1.73-.57l3 .45a2 2 0 0 1 1.72 2.01z"/></svg>
          Phone Lab (IVR)
        </a>
        <a href="#status">
          <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.6"><path d="M3 3v18h18"/><path d="M7 13l3 3 7-7"/></svg>
          Service Status
        </a>
      </nav>

      <div class="cta" style="margin-top:24px">
        <div style="font-weight:700; margin-bottom:6px">Need help now?</div>
        <div class="status"><span class="dot"></span> Agents online</div>
      </div>
    </aside>

    <!-- ======= CONTENT ======= -->
    <div class="content">
      <header class="topbar">
        <div class="search" role="search">
          <svg width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.8"><circle cx="11" cy="11" r="7"/><path d="M21 21l-4.3-4.3"/></svg>
          <input type="search" placeholder="Search articles or ask a question…" aria-label="Search" />
        </div>
        <div class="actions">
          <button class="btn" type="button" id="toggle-theme" title="Toggle theme">
            <svg width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.6"><path d="M12 3v2m0 14v2m9-9h-2M5 12H3m15.364 6.364l-1.414-1.414M7.05 7.05L5.636 5.636m12.728 0l-1.414 1.414M7.05 16.95l-1.414 1.414"/></svg>
            Theme
          </button>
          <button class="btn primary" type="button" onclick="document.getElementById('name').focus()">Open chat</button>
        </div>
      </header>

      <main>
        <!-- HERO -->
        <section class="hero" id="kb">
          <div class="spark" aria-hidden="true"></div>
          <div style="display:flex; align-items:center; gap:10px; margin-bottom:8px">
            <div class="badge">24/7 Support</div>
            <div class="status"><span class="dot"></span> Response time &lt; 2 min</div>
          </div>
          <h1>Concierge Support by <span style="color:var(--accent)">Website X</span></h1>
          <p>Luxury experience: live chat, video, phone calls, and an agent portal for end-to-end testing.</p>
        </section>

        <!-- GRID: Start form + Info -->
        <section class="grid" id="chat">
          <div class="card">
            <div class="card-body">
              <h2 style="margin:0 0 12px 0">Start a new chat</h2>
              <p class="helper">This chat simulates the customer side.</p>
              <form id="start-form" aria-label="Start form">
                <div class="split">
                  <div class="field">
                    <label class="label" for="name">Full name</label>
                    <input class="input" id="name" type="text" placeholder="e.g. Alex Johnson" required />
                  </div>
                  <div class="field">
                    <label class="label" for="email">Email</label>
                    <input class="input" id="email" type="email" placeholder="you@company.com" required />
                  </div>
                </div>
                <div class="split">
                  <div class="field">
                    <label class="label" for="topic">Topic</label>
                    <select id="topic" aria-label="Topic">
                      <option value="support">Technical support</option>
                      <option value="billing">Billing</option>
                      <option value="sales">Sales</option>
                    </select>
                  </div>
                  <div class="field">
                    <label class="label" for="priority">Priority</label>
                    <select id="priority" aria-label="Priority">
                      <option>Standard</option>
                      <option>High</option>
                      <option>Urgent</option>
                    </select>
                  </div>
                </div>
                <div class="start-actions">
                  <button class="btn primary" type="submit">Start chat</button>
                  <span class="helper">By starting, you accept our <a href="#" style="color:var(--accent)">Terms</a>.</span>
                </div>
              </form>
            </div>
          </div>

          <div class="card">
            <div class="card-body">
              <h3 style="margin:0">Demo flow (customer ↔ agent)</h3>
              <ol class="small" style="margin:10px 0 0 18px; line-height:1.6">
                <li>Start the <b>customer chat</b> here.</li>
                <li>Open the <b>Agent Portal</b>, log in with the demo user, and <i>receive</i> chats/calls.</li>
                <li>Use <b>Phone Lab (IVR)</b> to pick a customer profile and place a simulated call to experience IVR/routing.</li>
              </ol>
              <div class="kpis">
                <div class="kpi"><div class="label">Urgent SLA</div><div class="value">&lt; 60s</div></div>
                <div class="kpi"><div class="label">CSAT</div><div class="value">98.6%</div></div>
                <div class="kpi"><div class="label">Avg. Time to Resolve</div><div class="value">7m 42s</div></div>
              </div>
            </div>
          </div>
        </section>

        <!-- CHAT SHELL -->
        <section id="chat-container" class="chat hidden" aria-live="polite" aria-label="Live chat">
          <div class="chat-shell">
            <div class="chat-header">
              <div class="agent">
                <div class="avatar" aria-hidden="true">
                  <svg width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.6"><path d="M20 21v-2a4 4 0 0 0-4-4H8a4 4 0 0 0-4 4v2"/><circle cx="12" cy="7" r="4"/></svg>
                </div>
                <div>
                  <div style="font-weight:700">Concierge Agent</div>
                  <div class="status"><span class="dot"></span> Online</div>
                </div>
              </div>
              <div class="toolbar" role="toolbar" aria-label="Chat actions">
                <button class="btn" id="copy-transcript" type="button" title="Copy transcript">
                  <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.6"><rect x="9" y="9" width="13" height="13" rx="2"/><path d="M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1"/></svg>
                  Copy
                </button>
                <button class="btn" id="start-video" type="button" title="Start video"> 
                  <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.6"><path d="M23 7l-7 5 7 5V7"/><rect x="1" y="5" width="15" height="14" rx="2" ry="2"/></svg>
                  Video
                </button>
                <button class="btn hidden" id="end-video" type="button" title="Hang up">
                  <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.6"><path d="M22 16V8l-7 4 7 4z"/><rect x="2" y="6" width="14" height="12" rx="2"/><path d="M2 2l20 20"/></svg>
                  Hang up
                </button>
                <button class="btn" id="end-chat" type="button" title="End chat">
                  <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.6"><path d="M3 6h18"/><path d="M19 6v12a2 2 0 0 1-2 2H7a2 2 0 0 1-2-2V6"/></svg>
                  End Chat
                </button>
              </div>
            </div>

            <!-- VIDEO -->
            <div id="video-container" class="video-shell hidden">
              <div class="video-grid">
                <div class="video-pane">
                  <h4>You</h4>
                  <div id="local-media"></div>
                </div>
                <div class="video-pane">
                  <h4>Agent</h4>
                  <div id="remote-media"></div>
                </div>
              </div>
            </div>

            <!-- MESSAGES -->
            <div class="messages-wrap">
              <ul id="messages"></ul>
            </div>

            <!-- COMPOSER -->
            <form id="message-form" class="composer" autocomplete="off">
              <label class="chip" title="Attach file">
                <input type="file" hidden id="file-input" />
                <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.6"><path d="M21.44 11.05l-9.19 9.19a6 6 0 1 1-8.49-8.49l9.19-9.19a4 4 0 1 1 5.66 5.66L9.88 17.17"/></svg>
              </label>
              <input id="message-input" type="text" placeholder="Type a message…" aria-label="Type a message" />
              <button class="send" type="submit">Send</button>
            </form>
          </div>
        </section>

        <!-- ======= AGENT PORTAL ======= -->
        <section class="grid" id="agent-portal">
          <div class="card">
            <div class="card-body">
              <h2 style="margin:0 0 12px 0">Agent Portal — Access</h2>
              <p class="helper">Log in as an <b>agent</b> to receive chats and calls from this demo.</p>

              <div class="grid-2" style="margin-top:10px">
                <div class="field">
                  <label class="label">Portal URL</label>
                  <div class="row">
                    <input class="input" id="agentPortalUrl" value="" placeholder="https://portal.agents.demo"/>
                    <button class="btn" type="button" id="openPortal">Open</button>
                  </div>
                </div>
                <div class="field">
                  <label class="label">Demo credentials</label>
                  <div class="row wrap">
                    <span class="pill mono" id="agentUser-pill">user@example.com</span>
                    <button class="btn" data-copy="#agentUser-pill">Copy user</button>
                    <span class="pill mono" id="agentPass-pill">••••••</span>
                    <button class="btn" data-copy="#agentPass-pill">Copy passcode</button>
                  </div>
                </div>
              </div>

              <div class="callout small" style="margin-top:12px">
                Tip: keep the portal open while placing calls from <b>Phone Lab</b>.
              </div>
            </div>
          </div>

          <div class="card">
            <div class="card-body">
              <h3 style="margin:0 0 8px 0">Requirements</h3>
              <ul class="small" style="margin: 8px 0 0 18px; line-height:1.6">
                <li>Allow microphone/camera for WebRTC calls.</li>
                <li>Disable aggressive blockers if the portal requires 3rd-party cookies or CORS flows.</li>
                <li>Set your <span class="mono">API_BASE</span> and demo variables in this file.</li>
              </ul>
            </div>
          </div>
        </section>

        <!-- ======= PHONE LAB (IVR) ======= -->
        <section class="grid" id="phone-lab">
          <div class="card">
            <div class="card-body">
              <h2 style="margin:0 0 12px 0">Phone Lab — Customer Simulator + IVR</h2>
              <p class="helper">Pick a <b>customer profile</b>, launch the softphone (iframe), and hit <b>Start call</b>. We control the caller ID to trigger the correct IVR path.</p>

              <div class="grid-3" style="margin-top:10px">
                <div class="field">
                  <label class="label" for="customerProfile">Customer profile</label>
                  <select id="customerProfile"></select>
                </div>
                <div class="field">
                  <label class="label">Caller ID (ANI)</label>
                  <input class="input mono" id="callerId" placeholder="+15555550100"/>
                </div>
                <div class="field">
                  <label class="label">IVR number (DID to dial)</label>
                  <input class="input mono" id="ivrNumber" placeholder="+15555550123"/>
                </div>
              </div>

              <div class="grid-3" style="margin-top:10px">
                <div class="field">
                  <label class="label">Scenario ID</label>
                  <input class="input" id="scenario" placeholder="vip / billing-delinquent / onboarding"/>
                </div>
                <div class="field">
                  <label class="label">Auto DTMF (optional)</label>
                  <input class="input mono" id="dtmf" placeholder="1-2-1"/>
                </div>
                <div class="field">
                  <label class="label">Language</label>
                  <input class="input" id="locale" placeholder="en-US / es-CR"/>
                </div>
              </div>

              <div class="row" style="margin-top:12px">
                <button class="btn" id="launchSoftphone" type="button">Launch softphone</button>
                <button class="btn primary" id="startCall" type="button">Start call</button>
                <span class="small">The call is triggered via <span class="mono">POST /demo/call/start</span> on your server.</span>
              </div>
            </div>
          </div>

          <div class="card">
            <div class="card-body">
              <h3 style="margin:0 0 8px 0">Embedded softphone</h3>
              <div class="iframe-shell">
                <div id="softphoneWrap" class="iframe-placeholder">
                  Set <span class="mono">DEMO.softphoneUrl</span> to load your webphone here.
                </div>
              </div>
              <div class="callout small" style="margin-top:12px">
                If your softphone supports <i>postMessage</i>, we’ll send <span class="mono">{type: 'call', to, from, profile}</span> on start.
              </div>
            </div>
          </div>
        </section>
      </main>

      <footer>
        © <span id="year"></span> Website X • Premium Support — <a href="#" style="color:var(--accent)">Privacy</a> · <a href="#" style="color:var(--accent)">Terms</a>
      </footer>
    </div>
  </div>

  <!-- ======= SDKs: Conversations (chat) + Video (WebRTC) ======= -->
  <script src="https://media.twiliocdn.com/sdk/js/conversations/v2.4/twilio-conversations.min.js" defer></script>
  <script src="https://media.twiliocdn.com/sdk/js/video/releases/2.27.0/twilio-video.min.js" defer></script>

  <script>
    // === Your server base URL ===
    window.API_BASE = 'http://localhost:4000';

    // === Central DEMO config ===
    window.DEMO = {
      agentPortalUrl: 'https://agents.demo.example.com',
      agentUser: 'demo.agent@example.com',
      agentPasscode: '123456',
      softphoneUrl: '', // e.g. 'https://softphone.demo.example.com?token=...'
      ivrNumber: '+15555550123',  // your contact-center DID
      outboundFromNumber: '+15555550199',
      customerProfiles: [
        { id:'vip',     name:'VIP — Ana Gomez',      callerId:'+50671112233', scenario:'vip',                dtmf:'1-2',   locale:'es-CR', notes:'Priority routing' },
        { id:'billing', name:'Billing — Carlos Ruiz',callerId:'+50688887777', scenario:'billing-delinquent', dtmf:'2-1-1', locale:'es-CR', notes:'Past due' },
        { id:'new',     name:'New Customer — Eva Lee',callerId:'+12025550123',scenario:'new-onboarding',     dtmf:'3-2',   locale:'en-US', notes:'Onboarding EN' }
      ]
    };
  </script>

  <script>
    // ======= Lightweight UI glue (non-conflicting with chat.js) =======
    const qs = s => document.querySelector(s);
    const byId = id => document.getElementById(id);

    const messages = byId('messages');
    const copyBtn = byId('copy-transcript');

    // Footer year
    byId('year').textContent = new Date().getFullYear();

    // Theme toggle
    byId('toggle-theme').addEventListener('click', () => {
      document.body.classList.toggle('light');
    });

    // Copy transcript
    if (copyBtn) {
      copyBtn.addEventListener('click', () => {
        const transcript = Array.from(messages.querySelectorAll('li .bubble')).map(b=>b.textContent).join('\n');
        navigator.clipboard.writeText(transcript).then(()=> toast('Transcript copied'));
      });
    }

    // Small toast helper
    function toast(text){
      let node = byId('toast');
      if(!node){
        node = document.createElement('div');
        node.id='toast';
        node.style.position='fixed'; node.style.bottom='24px'; node.style.right='24px'; node.style.padding='12px 16px';
        node.style.border='1px solid var(--stroke)'; node.style.borderRadius='12px'; node.style.background='var(--card)'; node.style.color='var(--text)'; node.style.boxShadow='var(--shadow)';
        document.body.appendChild(node);
      }
      node.textContent=text;
      node.style.opacity='1';
      setTimeout(()=>{node.style.transition='opacity .5s'; node.style.opacity='0'}, 1800);
    }

    // ======= Agent Portal wiring =======
    const portalInput = byId('agentPortalUrl');
    const openPortal = byId('openPortal');
    const userPill = byId('agentUser-pill');
    const passPill = byId('agentPass-pill');

    if(portalInput){ portalInput.value = window.DEMO.agentPortalUrl || portalInput.value; }
    if(userPill){ userPill.textContent = window.DEMO.agentUser; }
    if(passPill){ passPill.textContent = window.DEMO.agentPasscode; }

    document.querySelectorAll('[data-copy]').forEach(btn => {
      btn.addEventListener('click', () => {
        const sel = btn.getAttribute('data-copy');
        const node = document.querySelector(sel);
        if(node){ navigator.clipboard.writeText(node.textContent).then(()=> toast('Copied')); }
      });
    });

    if(openPortal){
      openPortal.addEventListener('click', () => {
        const url = portalInput.value.trim() || window.DEMO.agentPortalUrl;
        if(!url) return toast('Set the Agent Portal URL first');
        window.open(url, '_blank', 'noopener');
      });
    }

    // ======= Phone Lab wiring =======
    const profileSelect = byId('customerProfile');
    const callerId = byId('callerId');
    const ivrNumber = byId('ivrNumber');
    const scenario = byId('scenario');
    const dtmf = byId('dtmf');
    const locale = byId('locale');
    const launchSoftphone = byId('launchSoftphone');
    const startCallBtn = byId('startCall');

    // Populate profiles
    if(profileSelect){
      (window.DEMO.customerProfiles || []).forEach(p => {
        const opt = document.createElement('option');
        opt.value = p.id; opt.textContent = p.name; profileSelect.appendChild(opt);
      });
      profileSelect.addEventListener('change', syncProfileToFields);
      if(profileSelect.options.length){ profileSelect.selectedIndex = 0; }
      syncProfileToFields();
    }

    function syncProfileToFields(){
      const p = (window.DEMO.customerProfiles || []).find(x => x.id === profileSelect.value);
      if(!p) return;
      callerId.value = p.callerId || '';
      ivrNumber.value = window.DEMO.ivrNumber || '';
      scenario.value = p.scenario || '';
      dtmf.value = p.dtmf || '';
      locale.value = p.locale || 'en-US';
    }

    // Load softphone iframe
    function ensureSoftphone(){
      const wrap = byId('softphoneWrap');
      if(!wrap) return null;
      if(wrap.tagName === 'IFRAME') return wrap;
      const url = window.DEMO.softphoneUrl;
      if(!url){ return null; }
      const iframe = document.createElement('iframe');
      iframe.className = 'softphone';
      iframe.src = url;
      wrap.replaceWith(iframe);
      return iframe;
    }

    if(launchSoftphone){
      launchSoftphone.addEventListener('click', () => {
        const url = window.DEMO.softphoneUrl;
        if(!url){ return toast('Set DEMO.softphoneUrl to load the softphone'); }
        const iframe = ensureSoftphone();
        if(iframe){ toast('Softphone loaded'); }
      });
    }

    // Start call -> your server
    if(startCallBtn){
      startCallBtn.addEventListener('click', async () => {
        const payload = {
          to: (ivrNumber.value || window.DEMO.ivrNumber || '').trim(),
          from: (callerId.value || window.DEMO.outboundFromNumber || '').trim(),
          profileId: profileSelect.value,
          scenario: scenario.value.trim(),
          dtmf: dtmf.value.trim(),
          locale: locale.value.trim()
        };
        if(!payload.to || !payload.from){ return toast('Fill IVR number and Caller ID'); }
        try{
          const res = await fetch(`${window.API_BASE}/demo/call/start`, {
            method:'POST', headers:{'Content-Type':'application/json'}, body: JSON.stringify(payload)
          });
          if(!res.ok) throw new Error('HTTP '+res.status);
          toast('Call started');
          // Inform softphone via postMessage if present
          const frame = document.querySelector('iframe.softphone');
          if(frame && frame.contentWindow){
            frame.contentWindow.postMessage({ type:'call', to: payload.to, from: payload.from, profile: payload }, '*');
          }
        }catch(err){
          console.error(err); toast('Could not start the call');
        }
      });
    }
  </script>

  <!-- Your real chat integration -->
  <script src="chat.js" defer></script>
</body>
</html>

==== /webchat\index.html ====

